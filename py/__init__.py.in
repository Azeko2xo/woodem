# The purpose of this file is twofold: 
# 1. it tells python that yade (this directory) is package of python modules
#	see http://http://www.python.org/doc/2.1.3/tut/node8.html#SECTION008400000000000000000
#
# 2. import the runtime namespace (will be populated from within c++)
#

"""Common initialization core for yade.

This file is executed when anything is imported from yade for the first time.
It loads yade plugins and injects c++ class constructors to the __builtins__
(that might change in the future, though) namespace, making them available
everywhere.
"""

import ctypes,sys
try:
	import dl
except ImportError:
	import DLFCN as dl
if True: # not eval('${mono}'):
	# see file:///usr/share/doc/python2.6/html/library/sys.html#sys.setdlopenflags
	# and various web posts on the topic, e.g.
	# * http://gcc.gnu.org/faq.html#dso
	# * http://www.code-muse.com/blog/?p=58
	# * http://wiki.python.org/moin/boost.python/CrossExtensionModuleDependencies
	sys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL)
else: sys.setdlopenflags(dl.RTLD_NOW)

# important: initialize c++ by importing libstdc++ directly
# see http://www.abclinuxu.cz/poradna/programovani/show/286322
# https://bugs.launchpad.net/bugs/490744
libstdcxx='${libstdcxx}' # substituted by scons
ctypes.cdll.LoadLibrary(libstdcxx)
#
# now ready for c++ imports

# find plugin directory
import os,os.path
import config
# find plugins recursively
plugins=[]
# might add followlinks=True to os.walk, for python>=2.6
for root,dirs,files in os.walk(config.libDir):
	# skip any directory named 'dbg' in the non-debug build
	if 'dbg' in dirs: dirs.remove('dbg')
	for f in files:
		# ouch, ugly!
		#if not config.debug and '/dbg/' in root: continue
		if not (f.startswith('lib') and f.endswith('.so')): continue
		plugin=os.path.join(config.libDir,root,f)
		plugins.append(plugin)
if 'YADE_DEBUG' in os.environ:
	print 'The following plugins will be loaded:'
	for p in plugins: print '\t'+p

# enable warnings which are normally invisible, such as DeprecationWarning
import warnings
warnings.simplefilter('default')

# import eigen before plugins because of its converters, so that default args to python methods can use Vector3r etc
import miniEigen

# c++ initialization code
import boot
boot.initialize(plugins,config.confDir)
import system
system.setExitHandlers() # avoid backtrace if crash at finalization (log4cxx)

# create proxies for deprecated classes
deprecatedTypes=system.cxxCtorsDict()
# insert those in the module namespace
globals().update(deprecatedTypes)
# declare what should be imported for "from yade import *"
__all__=deprecatedTypes.keys()+['O']
# fake miniEigen and wrapper being in yade itself
from miniEigen import *
from wrapper import *
# import to separate namespace to be able to call dir(miniEigen) and dir(wrapper) below
import wrapper 
# out-of-class docstrings for some classes
try: import _extraDocs
except AttributeError: print 'WARN: Error importing py/_extraDocs.py'
# attribute aliases
try: import _aliases
except AttributeError: print 'WARN: Error importing py/_aliases.py'

# import a few "important" modules along with *
#import utils # some others?
__all__+=[]+dir(miniEigen)+dir(wrapper)

