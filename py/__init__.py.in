# The purpose of this file is twofold: 
# 1. it tells python that yade (this directory) is package of python modules
#	see http://http://www.python.org/doc/2.1.3/tut/node8.html#SECTION008400000000000000000
#
# 2. import the runtime namespace (will be populated from within c++)
#

"""Common initialization core for yade.

This file is executed when anything is imported from yade for the first time.
It loads yade plugins and injects c++ class constructors to the __builtins__
(that might change in the future, though) namespace, making them available
everywhere.
"""

import ctypes,sys
try:
	import dl
except ImportError:
	import DLFCN as dl
# see file:///usr/share/doc/python2.6/html/library/sys.html#sys.setdlopenflags
# and various web posts on the topic, e.g.
# * http://gcc.gnu.org/faq.html#dso
# * http://www.code-muse.com/blog/?p=58
# * http://wiki.python.org/moin/boost.python/CrossExtensionModuleDependencies
sys.setdlopenflags(dl.RTLD_NOW | dl.RTLD_GLOBAL)
# important: initialize c++ by importing libstdc++ directly
# see http://www.abclinuxu.cz/poradna/programovani/show/286322
# https://bugs.launchpad.net/bugs/490744
libstdcxx='${libstdcxx}' # substituted by scons
ctypes.cdll.LoadLibrary(libstdcxx)
#
# now ready for c++ imports

# find plugin directory
import os,os.path
import config
libDir=(config.prefix if not os.environ.has_key('YADE_PREFIX') else os.environ['YADE_PREFIX'])+'/lib/yade'+config.suffix
# find plugins recursively
plugins=[]
for root,dirs,files in os.walk(libDir,followlinks=True):
	for f in files:
		if not (f.startswith('lib') and f.endswith('.so')): continue
		plugin=os.path.join(libDir,root,f)
		plugins.append(plugin)
	

# c++ initialization code
import boot,system,wrapper
boot.initialize(plugins)
# create types
__builtins__.update(system.cxxCtorsDict())
__builtins__['O']=wrapper.Omega()
system.setExitHandlers() # avoid backtrace if crash at finalization (log4cxx)

