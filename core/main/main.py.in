#!${pyExecutable}
# encoding: utf-8
# syntax:python

import sys,os,os.path,time,re
# get woo path (allow WOO_PREFIX to override)
prefix,suffix='${runtimePREFIX}' if not os.environ.has_key('WOO_PREFIX') else os.environ['WOO_PREFIX'],'${SUFFIX}'
# duplicate some items from woo.config here, so that we can increase verbosity when the c++ part is booting
features,version='${features}'.split(','),'${realVersion}'

## find available builds
nonDebugLibDir=prefix+'/lib/woo'+suffix
debugLibDir=nonDebugLibDir+'/dbg'
hasDebug,hasNonDebug=os.path.exists(debugLibDir+'/py/woo/__init__.py'),os.path.exists(nonDebugLibDir+'/py/woo/__init__.py')
if hasDebug and hasNonDebug: buildsAvailable='both non-debug and debug build'
elif hasDebug and not hasNonDebug: buildsAvailable='debug build only'
elif not hasDebug and hasNonDebug: buildsAvailable='non-debug build only'
else:
	raise RuntimeError('Neither non-debug nor debug build found! ('+nonDebugLibDir+'/py/woo/__init__.py, '+debugLibDir+'/py/woo/__init__.py)')


# handle command-line options first
import optparse
par=optparse.OptionParser(usage='%prog [options] [ simulation.xml[.bz2] | script.py [script options]]',prog=os.path.basename(sys.argv[0]),version='%s (%s; %s)'%(version,','.join(features),buildsAvailable),description="Woo: open-source platform for dynamic compuations. (Based on Yade, http://www.yade-dem.org, code hosted at http://www.launchpad.net/yade). This is version %s (with features %s, %s)."%(version,','.join(features),buildsAvailable))
par.add_option('-c',help='Run these python commands after the start (use -x to exit afterwards)',dest='commands',metavar='COMMANDS')
par.add_option('-j','--threads',help='Number of OpenMP threads to run; defaults to 1. Equivalent to setting OMP_NUM_THREADS environment variable.',dest='threads',type='int')
par.add_option('--cores',help='Set number of OpenMP threads (as \-\-threads) and in addition set affinity of threads to the cores given.',dest='cores',type='string')
par.add_option('--cl-dev',help='Numerical couple (comma-separated) givin OpenCL platform/device indices. This is machine-dependent value',dest='clDev')
par.add_option('--update',help='Update deprecated class names in given script(s) using text search & replace. Changed files will be backed up with ~ suffix. Exit when done without running any simulation.',dest='updateScripts',action='store_true')
par.add_option('--nice',help='Increase nice level (i.e. decrease priority) by given number.',dest='nice',type='int')
par.add_option('-x',help='Exit when the script finishes',dest='exitAfter',action='store_true')
par.add_option('-v',help='Increase logging verbosity; first occurence sets default logging level to info, second to debug, third to trace.'+
	('' if 'log4cxx' in features else " (Since this build doesn't use log4cxx, this option will only have effect if repeated twice (\-vv), equivalent to setting WOO_DEBUG environment variable)"),action='count',dest='verbosity')
par.add_option('-n',help="Run without graphical interface (equivalent to unsetting the DISPLAY environment variable)",dest='nogui',action='store_true')
par.add_option('--generate-manpage',help="Generate man page documenting this program and exit",dest='manpage',metavar='FILE')
par.add_option('-R','--rebuild',help="Re-run build in the source directory, then run the updated woo with the same command line except \-\-rebuild. The build profile for this build (${profile}) and its stored parameters will be used. If given twice, update from the repository will be attempted before recompilation.",dest='rebuild',action='count')
par.add_option('--test',help="Run regression test suite and exit; the exists status is 0 if all tests pass, 1 if a test fails and 2 for an unspecified exception.",dest="test",action='store_true')
par.add_option('-D','--debug',help='Run the debug build, if available.',dest='debug',action='store_true')
par.add_option('--checks',help='Run a series of user-defined check tests as described in ${sourceRoot}/scripts/test/checks/README',dest='checks',action='store_true')
par.add_option('--performance',help='Starts a test to measure the productivity',dest='performance',action='store_true')
par.add_option('--no-gdb',help='Do not show backtrace when Woo crashes (only effective with \-\-debug).',dest='noGdb',action='store_true',)
par.add_option('--in-gdb',help='Run Woo inside gdb (must be in $PATH).',dest='inGdb',action='store_true')
par.add_option('--in-pdb',help='Run Woo inside pdb',dest='inPdb',action='store_true')
par.add_option('--in-valgrind',help='Run inside valgrind (must be in $PATH); automatically adds python ignore files',dest='inValgrind',action='store_true')
par.disable_interspersed_args()

opts,args=par.parse_args()

# re-build woo so that the binary is up-to-date
if opts.rebuild:
	import subprocess
	sourceRoot,profile='${sourceRoot}','${profile}' # replaced at install-time
	if opts.rebuild>1:
		cmd=['bzr','up',sourceRoot]
		print 'Updating Woo using ',' '.join(cmd)
		if subprocess.call(cmd): raise RuntimeError('Error updating Woo from bzr repository.')
	# rebuild
	cmd=['scons','-Q','-C',sourceRoot,'profile=%s!'%profile,'debug=%d'%(1 if opts.debug else 0),'execCheck=%s'%(os.path.abspath(prefix+'/bin/woo'+suffix))]
	print 'Rebuilding Woo using',' '.join(cmd)
	if subprocess.call(cmd): raise RuntimeError('Error rebuilding Woo (--rebuild).')
	# run ourselves
	if '--rebuild' in sys.argv:
		argv=[v for v in sys.argv if v!='--rebuild']
	else:
		argv=[(v.replace('R','') if re.match('^-[^-].*',v) else v) for v in sys.argv if v!='-R']
	print 'Running Woo using',' '.join(argv)
	sys.exit(subprocess.call(argv))

# run this instance inside pdb
if opts.inPdb:
	import pdb
	pdb.set_trace()

# re-run inside gdb
if opts.inGdb:
	import tempfile, subprocess
	gdbBatch=tempfile.NamedTemporaryFile()
	args=["'"+arg.replace("'",r"\'")+"'" for arg in sys.argv if arg!='--in-gdb']
	gdbBatch.write('set pagination off\nrun '+' '.join(args)+'\n')
	gdbBatch.flush()
	print 'Spawning: gdb -x '+gdbBatch.name+' ${pyExecutable}'
	sys.exit(subprocess.call(['gdb','-x',gdbBatch.name,'${pyExecutable}']))

if opts.inValgrind:
	import subprocess,urllib,os.path
	saveTo='/tmp/valgrind-python.supp'
	if not os.path.exists(saveTo):
		print 'Downloading '+saveTo
		urllib.urlretrieve('http://svn.python.org/projects/python/trunk/Misc/valgrind-python.supp',saveTo)
	else:
		print 'Using alread-downloaded '+saveTo
	args=['valgrind','--suppressions='+saveTo,'${pyExecutable}']+[a for a in sys.argv if a!='--in-valgrind']
	print 'Running',' '.join(args)
	sys.exit(subprocess.call(args))

if opts.debug:
	if not hasDebug:
		raise RuntimeError('Debug build not available (run without --debug, or try --debug --rebuild)')
	libDir=debugLibDir
else:
	if not hasNonDebug:
		print 'WARNING: non-debug build not available, running with --debug instead (try --rebuild to get the non-debug build).'
	libDir=nonDebugLibDir

## remove later
## python2.5 relative module imports workaround
#v=sys.version_info
#if v[0]==2 and v[1]<=5:
#	for submodule in ('woo','gts','woo/tests'):
#		sys.path.append(os.path.join(libDir,'py',submodule))

sys.path.append(os.path.join(libDir,'py'))

# run regression test suite and exit
if opts.test:
	import woo.tests
	try:
		result=woo.tests.testAll()
	except:
		print 20*'*'+' UNEXPECTED EXCEPTION WHILE RUNNING TESTS '+20*'*'
		print 20*'*'+' '+str(sys.exc_info()[0])
		print 20*'*'+" Please report bug at http://bugs.launchpad.net/woo providing the following traceback:"
		import traceback; traceback.print_exc()
		print 20*'*'+' Thank you '+20*'*'
		sys.exit(2)
	if result.wasSuccessful():
		print "*** ALL TESTS PASSED ***"
		sys.exit(0)
	else:
		print 20*'*'+' SOME TESTS FAILED '+20*'*'
		sys.exit(1)

# c++ boot code checks for WOO_DEBUG at some places; debug verbosity is equivalent
# do this early, to have debug messages in the boot code (plugin registration etc)
if opts.verbosity>1: os.environ['WOO_DEBUG']='1'

if not 'openmp' in features and (opts.cores or (opts.threads and opts.threads>1)):
	print 'WARNING: compiled without OpenMP, -j/--threads/--cores have no effect.'

# OpenMP env variables must be se before loading woo libs ("import woo" below)
# changes have no effeect after libgomp initializes
if opts.cores:
	if opts.threads: print 'WARNING: --threads ignored, since --cores specified.'
	try:
		cores=[int(i) for i in opts.cores.split(',')]
	except ValueError:
		raise ValueError('Invalid --cores specification %s, should be a comma-separated list of non-negative integers'%opts.cores)
	opts.nthreads=len(cores)
	os.environ['GOMP_CPU_AFFINITY']=' '.join([str(cores[0])]+[str(c) for c in cores])
	os.environ['OMP_NUM_THREADS']=str(len(cores))
elif opts.threads: os.environ['OMP_NUM_THREADS']=str(opts.threads)
else: os.environ['OMP_NUM_THREADS']='1'

if not 'opencl' in features and opts.clDev:
	print 'WARNING: compiled without OpenCL, --cl-dev has not effect.'
if opts.clDev:
	try:
		clDev=[int(a) for a in opts.clDev.split(',')]
		if len(clDev)==1: clDev.append(-1) # default device
		if not len(clDev) in (1,2): raise ValueError()
	except (IndexError, ValueError, AssertionError):
		raise ValueError('Invalid --cl-dev specification %s, should an integer (platform), or a comma-separated couple (platform,device) of integers'%opts.clDev)

sys.stderr.write('Welcome to Woo '+version+'%s\n'%(' (debug build)' if opts.debug else ''))

# initialization and c++ plugins import
import woo
# other parts we will need soon
import woo.config
import woo.log
import woo.system
import woo.runtime

# continue option processing

if opts.updateScripts:
	woo.system.updateScripts(args)
	sys.exit(0)
if opts.manpage:
	import woo.manpage
	woo.manpage.generate_manpage(par,woo.config.metadata,opts.manpage,section=1,seealso='woo%s-batch (1)'%suffix)
	print 'Manual page %s generated.'%opts.manpage
	sys.exit(0)
if opts.nice:
	os.nice(opts.nice)
if woo.config.debug and opts.noGdb:
	woo.master.disableGdb()
if 'log4cxx' in woo.config.features and opts.verbosity:
	woo.log.setLevel('',[woo.log.INFO,woo.log.DEBUG,woo.log.TRACE][min(opts.verbosity,2)])
if 'opencl' in woo.config.features and opts.clDev:
	woo.master.defaultClDev=clDev


# modify sys.argv in-place so that it can be handled by userSession
sys.argv=woo.runtime.argv=args
woo.runtime.opts=opts

# Run the check tests listed in scripts/test/checks/checkList.py
if opts.checks:
	checksPath='${sourceRoot}'+'/scripts/test/checks' # replaced at install-time
	execfile(checksPath+'/checkList.py')

# Run performance check test
if opts.performance:
	checksPath='${sourceRoot}'+'/scripts/test/performance'
	execfile(checksPath+'/checkPerf.py')

# be helpful when not overridden
def onSelection(o):
	print "You selected an object. Define your own useful *onSelection(obj)* function to process it."

from math import *

def userSession(qt4=False,qapp=None):
	# prepare nice namespace for users
	import woo, woo.runtime
	import sys
	# start non-blocking qt4 app here; need to ask on the mailing list on how to make it functional
	## with ipython 0.11, start the even loop early (impossible with 0.10, which is thread-based)
	#if qt4 and woo.runtime.ipython_version==11:
	#	import IPython.lib.guisupport
	#	print 'aa'
	#	IPython.lib.guisupport.start_event_loop_qt4()
	#	print 'bb'
	if len(sys.argv)>0:
		arg0=sys.argv[0]
		if qt4: woo.qt.Controller();
		if sum(bool(arg0.endswith(ext)) for ext in ('.xml','.xml.bz2','.xml.gz','.woo','.woo.gz','.woo.bz2','.bin','.bin.gz','.bin.bz2','.gz'))>0:
			if len(sys.argv)>1: raise RuntimeError('Extra arguments to saved simulation to run: '+' '.join(sys.argv[1:]))
			sys.stderr.write("Running simulation "+arg0+'\n')
			woo.master.scene=woo.core.Scene.load(arg0); woo.master.scene.run()
			if woo.runtime.opts.exitAfter: woo.master.scene.wait() 
		if arg0.endswith('.py'):
			def runScript(script):
				sys.stderr.write("Running script "+arg0+'\n')
				try:
					execfile(script,globals())
				except SystemExit: raise
				except: # all other exceptions
					import traceback
					traceback.print_exc()
					if woo.runtime.opts.exitAfter: sys.exit(1)
				if woo.runtime.opts.exitAfter: sys.exit(0)
			runScript(arg0)
	if opts.commands:
		exec(opts.commands) in globals()
	if woo.runtime.opts.exitAfter: sys.exit(0)
	# common ipython configuration
	banner='[[ ^L clears screen, ^U kills line. '+', '.join((['F12 controller','F11 3d view','F10 both','F9 generator'] if (qt4) else [])+['F8 plot'])+'. ]]'
	ipconfig=dict( # ipython options, see e.g. http://www.cv.nrao.edu/~rreid/casa/tips/ipy_user_conf.py
		prompt_in1='Woo [\#]: ',
		prompt_in2='    .\D.: ',
		prompt_out=" -> [\#]: ",
		separate_in='',separate_out='',separate_out2='',
		#execfile=[prefix+'/lib/woo'+suffix+'/py/woo/ipython.py'],
		readline_parse_and_bind=[
			'tab: complete',
			# only with the gui; the escape codes might not work on non-linux terminals.
			]
			+(['"\e[24~": "\C-Uwoo.qt.Controller();\C-M"','"\e[23~": "\C-Uwoo.qt.View();\C-M"','"\e[21~": "\C-Uwoo.qt.Controller(), woo.qt.View();\C-M"','"\e[20~": "\C-Uwoo.qt.Generator();\C-M"'] if (qt4) else []) #F12,F11,F10,F9
			+['"\e[19~": "\C-Uimport woo.plot; woo.plot.plot();\C-M"', #F8
				'"\e[A": history-search-backward', '"\e[B": history-search-forward', # incremental history forward/backward
		]
	)
	
	# show python console
	# handle both ipython 0.10 and 0.11 (incompatible API)
	# print 'ipython version', woo.runtime.ipython_version
	if woo.runtime.ipython_version==10:
		from IPython.Shell import IPShellEmbed
		ipshell=IPShellEmbed(banner=banner,rc_override=ipconfig)
		ipshell()
		# save history -- a workaround for atexit handlers not being run (why?)
		# http://lists.ipython.scipy.org/pipermail/ipython-user/2008-September/005839.html
		import IPython.ipapi
		IPython.ipapi.get().IP.atexit_operations()
	elif woo.runtime.ipython_version in (11,12):
		# avoid warnings from ipython code
		from IPython.frontend.terminal.embed import InteractiveShellEmbed
		# use the dict to set attributes
		for k in ipconfig: setattr(InteractiveShellEmbed,k,ipconfig[k])
		InteractiveShellEmbed.banner1=banner+'\n' # called banner1 here, not banner anymore
		ipshell=InteractiveShellEmbed()
		if woo.runtime.ipython_version==12:
			ipshell.prompt_manager.in_template= 'Woo [\#]: '
			ipshell.prompt_manager.in2_template='    .\D.: '
			ipshell.prompt_manager.out_template=' -> [\#]: '
		ipshell()
		# similar to the workaround, as for 0.10 (perhaps not needed?)
		ipshell.atexit_operations()
	else: raise RuntimeError("Unhandled ipython version %d"%woo.runtime.ipython_version)

## run userSession in a way corresponding to the features we use:
gui=None
woo.runtime.hasDisplay=False # this is the default initialized in the module, anyway
if 'qt4' in features: gui='qt4'
if opts.nogui: gui=None
if gui:
	import Xlib.display
	# PyQt4's QApplication does exit(1) if it is unable to connect to the display
	# we however want to handle this gracefully, therefore
	# we test the connection with bare xlib first, which merely raises DisplayError
	try:
		# contrary to display.Display, _BaseDisplay does not check for extensions and that avoids spurious message "Xlib.protocol.request.QueryExtension" (bug?)
		Xlib.display._BaseDisplay();
		woo.runtime.hasDisplay=True
	except: 
		# usually Xlib.error.DisplayError, but there can be Xlib.error.XauthError etc as well
		# let's just pretend any exception means the display would not work
		gui=None

# run remote access things, before actually starting the user session
from woo import remote
woo.remote.useQThread=(gui=='qt4')
woo.remote.runServers()

# for scripts
from woo import *
from math import *

if gui==None:
	userSession()
elif gui=='qt4':
	## we already tested that DISPLAY is available and can be opened
	## otherwise Qt4 might crash at this point
	import PyQt4
	from PyQt4 import QtGui
	from PyQt4.QtCore import *
	import woo.qt
	if woo.runtime.ipython_version==10:
		qapp=QtGui.QApplication(sys.argv)
	else:
		# create an instance of InteractiveShell before the inputhook is created
		# see http://stackoverflow.com/questions/9872517/how-to-embed-ipython-0-12-so-that-it-inherits-namespace-of-the-caller for details
		# fixes http://gpu.doxos.eu/trac/ticket/40
		from IPython.frontend.terminal.embed import InteractiveShellEmbed
		ipshell=InteractiveShellEmbed.instance()
		# keep the qapp referenced, otherwise 0.11 will die with "QWidget: Must construct QApplication before a QPaintDevice
		import IPython.lib.inputhook #guisupport
		qapp=IPython.lib.inputhook.enable_gui(gui='qt4')
	#try:
	#	qapp.setStyleSheet(open(woo.config.resourceDir+'/qmc2-black-0.10.qss').read())
	#except IOError: pass # stylesheet not readable or whatever
	userSession(qt4=True,qapp=qapp)

woo.master.exitNoBacktrace()

