#!${pyExecutable}
# encoding: utf-8
# syntax:python

import sys,os,os.path,time
# get yade path (allow YADE_PREFIX to override)
prefix,suffix='${runtimePREFIX}' if not os.environ.has_key('YADE_PREFIX') else os.environ['YADE_PREFIX'],'${SUFFIX}'
sys.path.append(os.path.join(prefix,'lib','yade'+suffix,'py'))
# duplicate some items from yade.config here, so that we can increase verbosity when the c++ part is booting
debug,features,version=bool(${debug}),'${features}'.split(','),'${realVersion}'

## python2.5 relative module imports workaround
v=sys.version_info
if v[0]==2 and v[1]<=5:
	for submodule in ('yade','gts','yade/tests'):
		sys.path.append(os.path.join(prefix,'lib','yade'+suffix,'py',submodule))

# handle command-line options first
import optparse
par=optparse.OptionParser(usage='%prog [options] [ simulation.xml[.bz2] | script.py [script options]]',prog=os.path.basename(sys.argv[0]),version='%s (%s)%s'%(version,','.join(features),' with debugging symbols' if debug else ''),description="Yade: open-source platform for dynamic compuations. Homepage http://www.yade-dem.org, code hosted at http://www.launchpad.net/yade. This is version %s (with features %s %s)."%(version,','.join(features),', with debugging symbols' if debug else ''))
par.add_option('-j','--threads',help='Number of OpenMP threads to run; defaults to number of cores. Equivalent to setting OMP_NUM_THREADS environment variable.',dest='threads',type='int')
par.add_option('--update',help='Update deprecated class names in given script(s) using text search & replace. Changed files will be backed up with ~ suffix. Exit when done without running any simulation.',dest='updateScripts',action='store_true')
par.add_option('--nice',help='Increase nice level (i.e. decrease priority) by given number.',dest='nice',type='int')
par.add_option('-x',help='Exit when the script finishes',dest='exitAfter',action='store_true')
par.add_option('-v',help='Increase logging verbosity; first occurence sets default logging level to info, second to debug, third to trace.'+
	('' if 'log4cxx' in features else " (Since this build doesn't use log4cxx, this option will only have effect if repeated twice (-vv), equivalent to setting YADE_DEBUG environment variable)"),action='count',dest='verbosity')
if debug:
	par.add_option('--no-gdb',help='Do not show backtrace when yade crashes.',dest='noGdb',action='store_true',)
par.add_option('-n',help="Run without graphical interface (equivalent to unsetting the DISPLAY environment variable)",dest='nogui',action='store_true')
par.add_option('--generate-manpage',help="Generate man page documenting this program and exit",dest='manpage',metavar='FILE')

opts,args=par.parse_args()
# c++ boot code checks for YADE_DEBUG at some places; debug verbosity is equivalent
# do this early, to have debug messages in the boot code (plugin registration etc)
if opts.verbosity>1: os.environ['YADE_DEBUG']='1'

# this must be done before loading yade libs ("import yade" below)
# has no effeect after libgomp initializes
if opts.threads: os.environ['OMP_NUM_THREADS']=str(opts.threads)

sys.stderr.write('Welcome to Yade '+version+'\n')

if 'opengl' in features and 'noqt3' in features:
	try:
		from PyQt4 import QtGui
		qapp=QtGui.QApplication(sys.argv)
		import thread
		thread.start_new_thread(qapp.exec_,()) # this will warn, but I don't know a way around that
	except ImportError: pass

# initialization and c++ plugins import
import yade
# other parts we will need soon
import yade.config
import yade.wrapper
import yade.log
import yade.system


# continue option processing

if opts.updateScripts:
	yade.system.updateScripts(args)
	sys.exit(0)
if opts.manpage:
	import yade.manpage
	yade.manpage.generate_manpage(par,yade.config.metadata,opts.manpage,section=1,seealso='yade%s-multi (1)'%suffix)
	print 'Manual page %s generated.'%opts.manpage
	sys.exit(0)
if opts.nice:
	os.nice(opts.nice)
if yade.config.debug and opts.noGdb:
	yade.wrapper.Omega().disableGdb()
if 'log4cxx' in yade.config.features and opts.verbosity:
	yade.log.setLevel('',[yade.log.INFO,yade.log.DEBUG,yade.log.TRACE][min(opts.verbosity,2)])

# run servers
yade.system.runServers()

if not 'noqt3' in features:
	# open GUI if possible
	qtEnabled=False
	if not opts.nogui:
		try:
			import yade.qt
			qtEnabled=True
		except ImportError: pass


# prepare nice namespace for users
from yade import *
from math import *

# something to run?
if len(args)>0:
	if qtEnabled: yade.qt.Controller()
	if args[0].endswith('.xml') or args[0].endswith('.xml.bz2'):
		if len(args)>1: raise RuntimeError('Extra arguments to XML simulation to run: '+' '.join(args[1:]))
		sys.stderr.write("Running simulation "+args[0]+'\n')
		O=yade.wrapper.Omega(); O.load(args[0]); O.run()
	if args[0].endswith('.py'):
		sys.stderr.write("Running script "+args[0]+'\n')
		yade.runtime.argv=args[1:]
		try:
			execfile(args[0])
		except SystemExit: raise
		except: # all other exceptions
			import traceback
			traceback.print_exc()
			if opts.exitAfter: sys.exit(1)
		if opts.exitAfter: sys.exit(0)

# show python command-line
if 1:
	if 1:
		from IPython.Shell import IPShellEmbed
		ipshell=IPShellEmbed(
			argv=['-q4thread'],
			#exit_msg='Bye.',
			banner='[[ ^L clears screen, ^U kills line.'+(' F12 controller, F11 3d view, F10 both, F9 generator, F8 plot.' if qtEnabled else '')+' ]]',
			rc_override=dict( # ipython options, see e.g. http://www.cv.nrao.edu/~rreid/casa/tips/ipy_user_conf.py
				prompt_in1='Yade [\#]: ',
				prompt_in2='     .\D.: ',
				prompt_out=" ->  [\#]: ",
				separate_in='0',
				separate_out='0',
				separate_out2='0',
				#execfile=[prefix+'/lib/yade'+suffix+'/py/yade/ipython.py'],
				readline_parse_and_bind=[
					'tab: complete',
					# only with the gui
					# the escape codes might not work on non-linux terminals.
					]+(['"\e[24~": "\C-Uyade.qt.Controller();\C-M"', # F12
					'"\e[23~": "\C-Uyade.qt.View();\C-M"', # F11
					'"\e[21~": "\C-Uyade.qt.Controller(), yade.qt.View();\C-M"', # F10
					'"\e[20~": "\C-Uyade.qt.Generator();\C-M"', #F9
					'"\e[19~": "\C-Uimport yade.plot; yade.plot.plot();\C-M"', #F9
					'"\e[A": history-search-backward', '"\e[B": history-search-forward', # incremental history forward/backward
					] if qtEnabled else [])
			)
		)
		ipshell()
		# save history -- a workaround for atexit handlers not being run (why?)
		# http://lists.ipython.scipy.org/pipermail/ipython-user/2008-September/005839.html
		import IPython.ipapi
		IPython.ipapi.get().IP.atexit_operations()
	else:
		import bpython
		bpython.embed()
O.exitNoBacktrace()
