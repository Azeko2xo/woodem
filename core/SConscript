# syntax: python
Import('*')

pyMain='$PREFIX/bin/woo$SUFFIX'
main=env.ScanReplace('main/main.py.in')
batch=env.ScanReplace('main/yade-batch.in')
env.AlwaysBuild(main)
env.AlwaysBuild(batch)
env.InstallAs(pyMain,main)
env.InstallAs(pyMain+'-batch',batch)
env.AddPostAction(pyMain,Chmod(pyMain,0755))
env.AddPostAction(pyMain+'-batch',Chmod(pyMain+'-batch',0755))
import os.path
## for --rebuild
if 'execCheck' in env and env['execCheck']!=os.path.abspath(env.subst(pyMain)):
	raise RuntimeError('execCheck option (%s) does not match what is about to be installed (%s)'%(env['execCheck'],env.subst(pyMain)))

env.Install('$LIBDIR/py/yade',[
	env.SharedLibrary('boot',['main/pyboot.cpp'],SHLIBPREFIX='',LIBS=env['LIBS']+['woo-support','core'])
])

env.Install('$LIBDIR/lib',[
	env.SharedLibrary('core',
		env.Combine('core.cpp',[
			#'Body.cpp',
			#'BodyContainer.cpp',
			'Cell.cpp', 
			'EnergyTracker.cpp',
			'Engine.cpp',
			'Field.cpp',
			'MatchMaker.cpp',
			'Scene.cpp',
			'Dispatcher.cpp',
			'Master.cpp',
			#'BgThread.cpp',
			'Preprocessor.cpp',
			'corePlugins.cpp'
			]
			),
		LIBS=env['LIBS']+[
			'woo-support',
			'rt', # realtime lib, for clock_gettime 
			]
			,
	)
])
