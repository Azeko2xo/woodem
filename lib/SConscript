# vim: set filetype=python :
Import('*')
linkPlugins=env['linkPlugins']
import os.path 

# will switch according to scons configuration to one or another
def yadeStaticOrSharedLib(*args,**kw):
	return env.Install('$PREFIX/lib/yade$SUFFIX/lib',env.SharedLibrary(*args,**kw))
	#return env.Install('$PREFIX/lib/yade$SUFFIX/lib',env.StaticLibrary(*args,**kw))

if 'qt3' not in env['exclude']:
	yadeStaticOrSharedLib('yade-serialization-qt',['serialization-qt/QtGUIGenerator.cpp'],
		#LIBS=env['LIBS']+['yade-suypportbase','XMLFormatManager']),
		LIBS=['yade-support']),
	yadeStaticOrSharedLib('yade-QGLViewer',Split('''
		QGLViewer/VRenderInterface_Qt3.ui
		QGLViewer/ImageInterface_Qt3.ui
		QGLViewer/qglviewer.cpp 
		QGLViewer/camera.cpp 
		QGLViewer/manipulatedFrame.cpp 
		QGLViewer/manipulatedCameraFrame.cpp 
		QGLViewer/frame.cpp 
		QGLViewer/saveSnapshot.cpp 
		QGLViewer/constraint.cpp 
		QGLViewer/keyFrameInterpolator.cpp 
		QGLViewer/mouseGrabber.cpp 
		QGLViewer/quaternion.cpp 
		QGLViewer/vec.cpp
		QGLViewer/VRender/BackFaceCullingOptimizer.cpp 
		QGLViewer/VRender/BSPSortMethod.cpp 
		QGLViewer/VRender/EPSExporter.cpp 
		QGLViewer/VRender/Exporter.cpp 
		QGLViewer/VRender/FIGExporter.cpp 
		QGLViewer/VRender/gpc.cpp 
		QGLViewer/VRender/ParserGL.cpp 
		QGLViewer/VRender/Primitive.cpp 
		QGLViewer/VRender/PrimitivePositioning.cpp 
		QGLViewer/VRender/TopologicalSortMethod.cpp 
		QGLViewer/VRender/VisibilityOptimizer.cpp 
		QGLViewer/VRender/Vector2.cpp 
		QGLViewer/VRender/Vector3.cpp 
		QGLViewer/VRender/NVector3.cpp 
		QGLViewer/VRender/VRender.cpp
		'''),
		# we want to REALLY optimize this, even in debug builds of yade; and suppress all warnings also
		CXXFLAGS=[x for x in env['CXXFLAGS'] if x not in ['-ggdb3','-g','-pg'] ]+['-O3','-g0','-w'],
		# HACK: uic generates files in the buildDir, but gcc is invoked on files in the original dir;
		# since the generated header is #include'd "...", it looks for it in the original dir
		# no idea why this _does_ work with gui/qt3. Go figure.
		CPPPATH=env['CPPPATH']+['${TARGET.dir}'],
		LIBS=env['LIBS']+['GL']
	)
if 'YADE_OPENGL' in env['CPPDEFINES']:
	yadeStaticOrSharedLib('yade-opengl',env.Combine('yade-opengl.cpp',['opengl/FpsTracker.cpp','opengl/GLTextLabel.cpp','opengl/GLWindow.cpp','opengl/GLWindowsManager.cpp','opengl/GLUtils.cpp']),LIBS=env['LIBS']+['glut','GL','$QGLVIEWER_LIB']),

yadeStaticOrSharedLib('yade-support',env.Combine('yade-support.cpp',[
	'base/yadeWm3Extra.cpp',
	'computational-geometry/Distances2D.cpp','computational-geometry/Distances3D.cpp','computational-geometry/Intersections2D.cpp','computational-geometry/Intersections3D.cpp','computational-geometry/MarchingCube.cpp',
	'factory/ClassFactory.cpp','factory/DynLibManager.cpp','factory/FactoryExceptions.cpp',
	'multimethods/Indexable.cpp','multimethods/MultiMethodsExceptions.cpp',
	'serialization-xml/XMLFormatManager.cpp','serialization-xml/XMLSaxParser.cpp','serialization/Archive.cpp',
	'serialization/IOFormatManager.cpp','serialization/IOManagerExceptions.cpp','serialization/FormatChecker.cpp','serialization/Serializable.cpp','serialization/SerializableSingleton.cpp','serialization/SerializationExceptions.cpp']),LIBS=['dl'])

#######################
###### 3rd party libs
#######################

yadeStaticOrSharedLib('miniWm3',
	env.Combine('miniWm3.cpp',['miniWm3/Wm3Math.cpp','miniWm3/Wm3Matrix3.cpp','miniWm3/Wm3Quaternion.cpp','miniWm3/Wm3Vector3.cpp','miniWm3/Wm3Matrix2.cpp','miniWm3/Wm3Matrix4.cpp','miniWm3/Wm3Vector2.cpp','miniWm3/Wm3Vector4.cpp','miniWm3/Wm3Memory.cpp','miniWm3/Wm3String.cpp','miniWm3/Wm3System.cpp']),
	# miniWm3 cannot link with itself, filter it out.
	LIBS=filter(lambda l: l!='miniWm3',env['LIBS']),
	# miniWm3 will be always optimized and without debugging info, even in debug builds; suppress all warnings
	CXXFLAGS=env['CXXFLAGS']+['-O3','-g0','-w']),
yadeStaticOrSharedLib('sqlite3x',Split('sqlite3x/sqlite3x_command.cpp sqlite3x/sqlite3x_connection.cpp sqlite3x/sqlite3x_cursor.cpp sqlite3x/sqlite3x_exception.cpp sqlite3x/sqlite3x_settings_db.cpp	sqlite3x/sqlite3x_transaction.cpp'),LIBS='sqlite3',CXXFLAGS=env['CXXFLAGS']+['-O3','-g0']),
