/***************************************************************************
 *   Copyright (C) 2004 by Olivier Galizzi                                 *
 *   olivier.galizzi@imag.fr                                               *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __KINEMATICENGINE_H__
#define __KINEMATICENGINE_H__

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#include <vector>

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#include "Actor.hpp"

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

class Body;

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

/*! \brief Abstract interface for all kinematic engine.

	All kinematic engines must derived from this class. A kinematic engine is used to modify the state of an object (position,veloity ...) according to a predefined law (mathematical function, stored data ...) and not according to a dynamic law as dynamic engines do. A kinematic engine contains a list of bodies to act on, and a bodie can subscribe to several kinematic engines.
*/
class KinematicEngine : public Actor
{

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Attributes											///
///////////////////////////////////////////////////////////////////////////////////////////////////

	//protected : float startTime;
	//protected : float stopTime;
	protected : float time;

	/*! Lists of bodies which state will be modified by the kinematic engine */
	public : std::vector<int> subscribedBodies;

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Constructor/Destructor									///
///////////////////////////////////////////////////////////////////////////////////////////////////

	/*! Constructor */
	public : KinematicEngine ();

	/*! Virtual destructor for correct dealloction of polymorphic pointer */
	public : virtual ~KinematicEngine ();

///////////////////////////////////////////////////////////////////////////////////////////////////
/// Methods											///
///////////////////////////////////////////////////////////////////////////////////////////////////

	/*! Common interface for all kinematic engines. This method move all registered bodies from time t to time t+dt according to its internal law
		\param const std::vector<shared_ptr<Body> > vector of body that contains the registered one
	*/
	public : virtual void moveToNextTimeStep(Body* ) { throw; };

	public : void processAttributes();
	public : void registerAttributes();
	
	//public : virtual bool isActivated();
	public : virtual void action(Body* b);

	REGISTER_CLASS_NAME(KinematicEngine);

};

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

REGISTER_SERIALIZABLE(KinematicEngine,false);

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __KINEMATICENGINE_H__

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

