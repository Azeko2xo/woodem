/***************************************************************************
 *   Copyright (C) 2004 by Olivier Galizzi                                 *
 *   olivier.galizzi@imag.fr                                               *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

template <class RealType>
inline Se3<RealType>::Se3()  
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

template <class RealType>
inline Se3<RealType>::Se3(const Se3<RealType>& s) 
{ 
	position = s.position;
	orientation = s.orientation;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

template <class RealType>
inline Se3<RealType>::Se3(Vector3<RealType> p, Quaternion<RealType> r) 
{
	position = p;
	orientation = r;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////	

template <class RealType>
inline Se3<RealType> Se3<RealType>::inverse()
{
	return Se3(-(orientation.inverse()*position), orientation.inverse());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

template <class RealType>
inline Se3<RealType>::Se3(Se3<RealType>& a,Se3<RealType>& b) 
{
	position  = b.orientation.inverse()*(a.position - b.position) ;  
	orientation = b.orientation.inverse()*a.orientation  ;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////	

template <class RealType>
inline void Se3<RealType>::toGLMatrix(float m[16])
{

	orientation.toGLMatrix(m);
 	m[12] = position[0];
	m[13] = position[1];
	m[14] = position[2];
		
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////	

template <class RealType>
inline Vector3<RealType> Se3<RealType>::operator * (const Vector3<RealType>& b ) 
{
	return orientation*b+position; 
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////	

template <class RealType>
inline Se3<RealType> Se3<RealType>::operator * (const Se3<RealType>& b ) 
{
	return Se3<RealType>(orientation*b.position+position,orientation*b.orientation); 
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////	

template <class RealType>
inline Se3<RealType> Se3<RealType>::operator * (const Quaternion<RealType>& b )
{
	return Se3<RealType>(position , orientation*b);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////	
