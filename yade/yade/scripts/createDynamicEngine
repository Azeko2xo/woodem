#! /bin/sh


# This script can be used to create a new DynamicEngine sub project for kdevelop
# usage : ./createDynamicEngine nameOfYouNewEngine then just add the new subproject into kdevelop


###################################################################################################
### setting some variables									###
###################################################################################################

upperCaseName=`echo $1 | tr 'a-z' 'A-Z'`
commentLine="///////////////////////////////////////////////////////////////////////////////////////////////////"
skipLines=`echo $commentLine\\n$commentLine`
sourcePath=`pwd`
destPath=$YADEPATH/yade/src/plugins/DynamicEngine 
kdevPath=$YADEPATH/yade/projects/kdevelop/plugins/DynamicEngine

###################################################################################################
### Creating new directory									###
###################################################################################################

cd $destPath
mkdir $1
cd $1

###################################################################################################
### Writing hpp file										###
###################################################################################################

echo ''							>  $1.hpp
echo $commentLine					>> $1.hpp
echo $commentLine					>> $1.hpp
echo ''							>> $1.hpp

cat $YADEPATH/yade/projects/kdevelop/templates/hpp	>> $1.hpp

echo ''							>> $1.hpp
echo $commentLine					>> $1.hpp
echo $commentLine					>> $1.hpp
echo ''							>> $1.hpp

echo '#ifndef __'$upperCaseName'_HPP__'			>> $1.hpp
echo '#define __'$upperCaseName'_HPP__'			>> $1.hpp

echo ''							>> $1.hpp
echo $commentLine					>> $1.hpp
echo $commentLine					>> $1.hpp
echo ''							>> $1.hpp

echo '#include "DynamicEngine.hpp"'			>> $1.hpp

echo ''							>> $1.hpp
echo $commentLine					>> $1.hpp
echo $commentLine					>> $1.hpp
echo ''							>> $1.hpp

echo 'class ' $1 ': public DynamicEngine'		>> $1.hpp
echo '{'						>> $1.hpp

echo '' 						>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo '/// Attributes											///'	>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo ''							>> $1.hpp
echo '// DECLARE YOU ATTRIBUTES HERE'			>> $1.hpp

echo '' 						>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo '/// Constructor/Destructor								        ///'	>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo '' 						>> $1.hpp
echo '	/*! Constructor */'				>> $1.hpp
echo '	public : '$1'();'				>> $1.hpp
echo '' 						>> $1.hpp
echo '	/*! Destructor */' 				>> $1.hpp
echo '	public : virtual ~'$1'();'			>> $1.hpp


echo '' 						>> $1.hpp
echo '	public : void processAttributes();'		>> $1.hpp
echo '	public : void registerAttributes();'		>> $1.hpp
echo ''							>> $1.hpp
echo '	public : void respondToCollisions(Body* body, const std::list<shared_ptr<Interaction> >& interactions);'>> $1.hpp
echo '	REGISTER_CLASS_NAME('$1');'			>> $1.hpp
echo '};'						>> $1.hpp

echo ''							>> $1.hpp
echo $commentLine					>> $1.hpp
echo $commentLine					>> $1.hpp
echo ''							>> $1.hpp

echo 'REGISTER_CLASS('$1',false);'			>> $1.hpp

echo ''							>> $1.hpp
echo $commentLine					>> $1.hpp
echo $commentLine					>> $1.hpp
echo ''							>> $1.hpp

echo '#endif // __'$upperCaseName'_H__'			>> $1.hpp

echo ''							>> $1.hpp
echo $commentLine					>> $1.hpp
echo $commentLine					>> $1.hpp
echo ''							>> $1.hpp

###################################################################################################
### Writing cpp file										###
###################################################################################################

echo ''							>  $1.cpp
echo $commentLine					>> $1.cpp
echo $commentLine					>> $1.cpp
echo ''							>> $1.cpp

cat $YADEPATH/yade/projects/kdevelop/templates/cpp	>> $1.cpp

echo ''							>> $1.cpp
echo $commentLine					>> $1.cpp
echo $commentLine					>> $1.cpp
echo ''							>> $1.cpp

echo '#include "DynamicEngine.hpp"'			>> $1.cpp

echo ''							>> $1.cpp
echo $commentLine					>> $1.cpp
echo $commentLine					>> $1.cpp
echo ''							>> $1.cpp

echo $1'::'$1'() : public DynamicEngine'		>> $1.cpp
echo '{'						>> $1.cpp
echo ''							>> $1.cpp
echo '}'						>> $1.cpp

echo ''							>> $1.cpp
echo $commentLine					>> $1.cpp
echo $commentLine					>> $1.cpp
echo ''							>> $1.cpp

echo $1'::~'$1'()'					>> $1.cpp
echo '{'						>> $1.cpp
echo ''							>> $1.cpp
echo '}'						>> $1.cpp

echo ''							>> $1.cpp
echo $commentLine					>> $1.cpp
echo $commentLine					>> $1.cpp
echo ''							>> $1.cpp

echo 'void '$1'::processAttributes()'			>> $1.cpp
echo '{'						>> $1.cpp
echo '	DynamicEngine::processAttributes();'		>> $1.cpp
echo '  // PROCESS DESIRED ATTRIBUTES HERE'		>> $1.cpp
echo '}'						>> $1.cpp

echo ''							>> $1.cpp
echo $commentLine					>> $1.cpp
echo $commentLine					>> $1.cpp
echo ''							>> $1.cpp

echo 'void '$1'::registerAttributes()'			>> $1.cpp
echo '{'						>> $1.cpp
echo '	DynamicEngine::registerAttributes();'		>> $1.cpp
echo '  // REGISTER DESIRED ATTRIBUTES HERE'		>> $1.cpp
echo '}'						>> $1.cpp

echo ''							>> $1.cpp
echo $commentLine					>> $1.cpp
echo $commentLine					>> $1.cpp
echo ''							>> $1.cpp

echo 'void '$1'::respondToCollisions(Body* body, const std::list<shared_ptr<Interaction> >& interactions);' >> $1.cpp
echo '{'						>> $1.cpp
echo '	// PUT YOUR CODE HERE'				>> $1.cpp
echo '}'						>> $1.cpp

echo ''							>> $1.cpp
echo $commentLine					>> $1.cpp
echo $commentLine					>> $1.cpp
echo ''							>> $1.cpp


###################################################################################################
### Creating kdevelop project									###
###################################################################################################

cd $kdevPath
mkdir $1
cd $1

ln -s $destPath/$1/$1.hpp $1.hpp
ln -s $destPath/$1/$1.cpp $1.cpp

echo '# File generated by kdevelop s qmake manager.'					> $1.pro
echo '# -------------------------------------------'					>> $1.pro
echo '# Subdir relative project main directory: ./plugins/DynamicEngine/'$1		>> $1.pro
echo '# Target is a library:'								>> $1.pro
echo ''											>> $1.pro
echo 'LIBS += -lM3D \'									>> $1.pro
echo '        -lSerialization \'							>> $1.pro
echo '        -lConstants \'								>> $1.pro
echo '        -rdynamic'								>> $1.pro
echo 'INCLUDEPATH = ../../../yade \'							>> $1.pro
echo '              ../../../toolboxes/Math/M3D \'					>> $1.pro
echo '              ../../../toolboxes/Math/Constants \'				>> $1.pro
echo '              ../../../toolboxes/Libraries/Serialization'				>> $1.pro
echo 'MOC_DIR = $(YADECOMPILATIONPATH)'							>> $1.pro
echo 'UI_DIR = $(YADECOMPILATIONPATH)'							>> $1.pro
echo 'OBJECTS_DIR = $(YADECOMPILATIONPATH)'						>> $1.pro
echo 'QMAKE_LIBDIR = ../../../toolboxes/Math/M3D/$(YADEDYNLIBPATH) \'			>> $1.pro
echo '               ../../../toolboxes/Libraries/Serialization/$(YADEDYNLIBPATH) \'	>> $1.pro
echo '               ../../../toolboxes/Math/Constants/$(YADEDYNLIBPATH) \'		>> $1.pro
echo '               $(YADEDYNLIBPATH)'							>> $1.pro
echo 'DESTDIR = $(YADEDYNLIBPATH)'							>> $1.pro
echo 'CONFIG += debug \'								>> $1.pro
echo '          warn_on \'								>> $1.pro
echo '          dll'									>> $1.pro
echo 'TEMPLATE = lib'									>> $1.pro
echo 'HEADERS += '$1'.hpp'								>> $1.pro
echo 'SOURCES += '$1'.cpp'								>> $1.pro



###################################################################################################
### Going back to initial directory								###
###################################################################################################

cd $sourcePath
