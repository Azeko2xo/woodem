#! /bin/sh


if [ "${1:-nothing}" = "nothing" ];
then
  echo 'Usage: createDynlib "dynLibName" "baseClassName" "directory"';
  exit 0;
fi


# YADEPATH
if [ "${YADEPATH:-nothing}" = "nothing" ];
then
  echo "ERROR:  YADEPATH is not defined, you forgot to run:";
  echo "        source ./yadeEnv YOUR_PATH_TO_YADE";
  exit 0;
else
  echo "I'm using YADEPATH="${YADEPATH};
fi

# YADEBINPATH
if [ "${YADEBINPATH:-nothing}" = "nothing" ];
then
  echo "ERROR:  YADEBINPATHis not defined, you forgot to run:";
  echo "        source ./yadeEnv YOUR_PATH_TO_YADE";
  exit 0;
else
  echo "I'm using YADEBINPATH="${YADEBINPATH};
fi

# YADECOMPILATIONPATH
if [ "${YADECOMPILATIONPATH:-nothing}" = "nothing" ];
then
  echo "ERROR:  YADECOMPILATIONPATH is not defined, you forgot to run:";
  echo "        source ./yadeEnv YOUR_PATH_TO_YADE";
  exit 0;
else
  echo "I'm using YADECOMPILATIONPATH="${YADECOMPILATIONPATH};
fi

# YADEDYNLIBPATH
if [ "${YADEDYNLIBPATH:-nothing}" = "nothing" ];
then
  echo "ERROR:  YADEDYNLIBPATHis not defined, you forgot to run:";
  echo "        source ./yadeEnv YOUR_PATH_TO_YADE";
  exit 0;
else
  echo "I'm using YADEDYNLIBPATH="${YADEDYNLIBPATH};
fi

# YADEINCLUDEPATH
if [ "${YADEINCLUDEPATH:-nothing}" = "nothing" ];
then
  echo "ERROR:  YADEINCLUDEPATHis not defined, you forgot to run:";
  echo "        source ./yadeEnv YOUR_PATH_TO_YADE";
  exit 0;
else
  echo "I'm using YADEINCLUDEPATH="${YADEINCLUDEPATH};
fi




# This script can be used to create a new DynamicEngine sub project for kdevelop
# usage : ./createDynamicEngine nameOfYouNewEngine then just add the new subproject into kdevelop


###################################################################################################
### setting some variables									###
###################################################################################################

echo ''														> commentLine
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> commentLine
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> commentLine
echo ''														>> commentLine
upperCaseName=`echo $1 | tr 'a-z' 'A-Z'`
sourcePath=`pwd`
destPath=$YADEPATH/yade/src/$3
kdevPath=$YADEPATH/yade/projects/kdevelop/$3

###################################################################################################
### Creating new directory									###
###################################################################################################

cd $destPath
mkdir $1
cd $1

###################################################################################################
### Writing hpp file										###
###################################################################################################

cat $YADEPATH/yade/projects/kdevelop/templates/hpp								>  $1.hpp

cat $sourcePath/commentLine											>> $1.hpp 

echo '#ifndef __'$upperCaseName'_HPP__'										>> $1.hpp
echo '#define __'$upperCaseName'_HPP__'										>> $1.hpp

cat $sourcePath/commentLine											>> $1.hpp

echo '#include "'$2'.hpp"'											>> $1.hpp

cat $sourcePath/commentLine											>> $1.hpp

echo 'class '$1' : public '$2											>> $1.hpp
echo '{'													>> $1.hpp
echo '' 													>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo '/// Attributes										      ///'	>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo ''														>> $1.hpp
echo '// DECLARE YOU ATTRIBUTES HERE'										>> $1.hpp
echo ''														>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo '/// Constructor/Destructor								      ///'	>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo '' 													>> $1.hpp
echo '	/*! Constructor */'											>> $1.hpp
echo '	public : '$1'();'											>> $1.hpp
echo '' 													>> $1.hpp
echo '	/*! Destructor */' 											>> $1.hpp
echo '	public : virtual ~'$1'();'										>> $1.hpp
echo '' 													>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo '/// Methods										      ///'	>> $1.hpp
echo '///////////////////////////////////////////////////////////////////////////////////////////////////'	>> $1.hpp
echo ''														>> $1.hpp
echo '// DECLARE YOU METHODS HERE'										>> $1.hpp
echo ''														>> $1.hpp
echo '};'													>> $1.hpp

cat $sourcePath/commentLine											>> $1.hpp

echo '// CALL REGISTER_SERIALIZABLE OR REGISTER_FACTORABLE MACRO HERE'						>> $1.hpp

cat $sourcePath/commentLine											>> $1.hpp

echo '#endif // __'$upperCaseName'_HPP__'									>> $1.hpp

cat $sourcePath/commentLine											>> $1.hpp

###################################################################################################
### Writing cpp file										###
###################################################################################################

cat $YADEPATH/yade/projects/kdevelop/templates/cpp								>  $1.cpp

cat $sourcePath/commentLine											>> $1.cpp 

echo '#include "'$1'.hpp"'											>> $1.cpp

cat $sourcePath/commentLine											>> $1.cpp

echo $1'::'$1'() : '$2'()'											>> $1.cpp
echo '{'													>> $1.cpp
echo ''														>> $1.cpp
echo '}'													>> $1.cpp

cat $sourcePath/commentLine											>> $1.cpp

echo $1'::~'$1'()'												>> $1.cpp
echo '{'													>> $1.cpp
echo ''														>> $1.cpp
echo '}'													>> $1.cpp

cat $sourcePath/commentLine											>> $1.cpp

###################################################################################################
### Creating kdevelop project									###
###################################################################################################

cd $YADEINCLUDEPATH
ln -s $destPath/$1/$1.hpp $1.hpp

cd $kdevPath
mkdir $1
cd $1

ln -s $destPath/$1/$1.hpp $1.hpp
ln -s $destPath/$1/$1.cpp $1.cpp

echo '# File generated by YADE macro'										> $1.pro
echo '# -------------------------------------------'								>> $1.pro
echo '# Target is a library:'											>> $1.pro
echo ''														>> $1.pro
echo 'LIBS += -rdynamic'											>> $1.pro
echo 'INCLUDEPATH = $(YADEINCLUDEPATH) '									>> $1.pro
echo 'MOC_DIR = $(YADECOMPILATIONPATH)'										>> $1.pro
echo 'UI_DIR = $(YADECOMPILATIONPATH)'										>> $1.pro
echo 'OBJECTS_DIR = $(YADECOMPILATIONPATH)'									>> $1.pro
echo 'QMAKE_LIBDIR = $(YADEDYNLIBPATH)'										>> $1.pro
echo 'DESTDIR = $(YADEDYNLIBPATH)'										>> $1.pro
echo 'CONFIG += debug \'											>> $1.pro
echo '          warn_on \'											>> $1.pro
echo '          dll'												>> $1.pro
echo 'TEMPLATE = lib'												>> $1.pro
echo 'HEADERS += '$1'.hpp'											>> $1.pro
echo 'SOURCES += '$1'.cpp'											>> $1.pro

###################################################################################################
### Modifying parent project									###
###################################################################################################

cd ..

echo -n 'cp $1 /tmp/prout; cat /tmp/prout | sed -e ' > addSubProject
echo -n "'" >> addSubProject
echo -n 's/SUBDIRS += /SUBDIRS += '$1' \\\n           /' >> addSubProject
echo -n "'" >> addSubProject
echo ' > $1' >> addSubProject


chmod 777 addSubProject

addSubProject `ls *.pro` 

rm addSubProject


###################################################################################################
### Going back to initial directory								###
###################################################################################################

cd $sourcePath
rm commentLine
