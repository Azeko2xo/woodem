/***************************************************************************
 *   Copyright (C) 2004 by Olivier Galizzi                                 *
 *   olivier.galizzi@imag.fr                                               *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline Quaternion::Quaternion (float fW, float fX, float fY, float fZ) : Serializable()
{
    w = fW;
    x = fX;
    y = fY;
    z = fZ;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline Quaternion::Quaternion (const Quaternion& rkQ) : Serializable()
{
    w = rkQ.w;
    x = rkQ.x;
    y = rkQ.y;
    z = rkQ.z;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool Quaternion::operator== (const Quaternion& q) const
{
	if ( FUZZ == 0.0f )
        	return w == q.w && x == q.x && y == q.y && z == q.z;
	else
		return fabs(w - q.w) <= FUZZ && fabs(x - q.x) <= FUZZ && fabs(y - q.y) <= FUZZ && fabs(z - q.z) <= FUZZ;
}

inline Quaternion& Quaternion::operator= (const Quaternion& q)
{
    w = q.w;
    x = q.x;
    y = q.y;
    z = q.z;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline Quaternion& Quaternion ::normalize()
{
	float n = sqrt(w*w+x*x+y*y+z*z);
   	w /= n;
	x /= n;
	y /= n;
	z /= n;
	return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

//float Quaternion::norm()
//{
//   	return w*w+x*x+y*y+z*z;
//}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline Quaternion Quaternion::operator+ (const Quaternion& q) const
{
    return Quaternion(w+q.w,x+q.x,y+q.y,z+q.z);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline Quaternion Quaternion::operator- (const Quaternion& q) const
{
    return Quaternion(w-q.w,x-q.x,y-q.y,z-q.z);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline Quaternion Quaternion::operator* (const Quaternion& q) const
{
    // NOTE:  Multiplication is not generally commutative, so in most
    // cases p*q != q*p.

    return Quaternion
    (
        w*q.w-x*q.x-y*q.y-z*q.z,
        w*q.x+x*q.w+y*q.z-z*q.y,
        w*q.y+y*q.w+z*q.x-x*q.z,
        w*q.z+z*q.w+x*q.y-y*q.x
    );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline Quaternion Quaternion::operator* (float f) const
{
    return Quaternion(f*w,f*x,f*y,f*z);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline Quaternion operator* (float f, const Quaternion& q)
{
    return Quaternion(f*q.w,f*q.x,f*q.y,f*q.z);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline Quaternion Quaternion::operator- () const
{
    return Quaternion(-w,-x,-y,-z);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline float Quaternion::dot (const Quaternion& q) const
{
    return w*q.w+x*q.x+y*q.y+z*q.z;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

inline float Quaternion::norm () const
{
    return w*w+x*x+y*y+z*z;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
