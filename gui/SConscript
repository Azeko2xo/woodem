# vim:syntax=python
Import('*')

if 'EMBED_PYTHON' in env['CPPDEFINES']: linkPythonUI=['PythonUI']
else: linkPythonUI=[]

if 'qt3' not in env['exclude']:
	env.Install('$PREFIX/lib/yade$SUFFIX/gui',[
		env.SharedLibrary('QtGUI',
			['qt3/FileDialog.cpp',
				'qt3/GLViewer.cpp',
				'qt3/MessageDialog.cpp',
				'qt3/QtFileGenerator.cpp',
				'qt3/QtFileGeneratorController.ui',
				'qt3/QtGUI.cpp',
				'qt3/QtGUIPreferences.cpp',
				'qt3/QtGeneratedMessageDialog.ui',
				'qt3/QtGeneratedSimulationController.ui',
				'qt3/SimulationController.cpp',
				'qt3/YadeQtGeneratedMainWindow.ui',
				'qt3/YadeQtMainWindow.cpp',
				'qt3/YadeCamera.cpp',
				'qt3/GLSimulationPlayerViewer.cpp',
				'qt3/QtGeneratedSimulationPlayer.ui',
				'qt3/QtSimulationPlayer.cpp',
				],
			LIBS=env['LIBS']+linkPythonUI+[
				'yade-opengl',
				'yade-serialization',
				'XMLFormatManager',
				'yade-serialization-qt',
				'GravityEngines',
				'OpenGLRenderingEngine',
				'PositionOrientationRecorder',
				'sqlite3x',
				'FilterEngine',
				'$QGLVIEWER_LIB'],
			CPPPATH=env['CPPPATH']+['qt3']
		),
		env.SharedLibrary('SnapshotEngine',['qt3/SnapshotEngine.cpp'],LIBS=env['LIBS']+['QtGUI'],CPPPATH=env['CPPPATH']+['qt3']),
	])

if 'EMBED_PYTHON' in env['CPPDEFINES']:
	env.Install('$PREFIX/lib/yade$SUFFIX/gui',[
		env.SharedLibrary('PythonUI',['py/PythonUI.cpp']),
		env.SharedLibrary('PeriodicPythonRunner',['py/PeriodicPythonRunner.cpp']),
		env.File('PythonUI_rc.py','py'),
	])
	if 'qt3' not in env['exclude']:
		env.Install('$PREFIX/lib/yade$SUFFIX/gui/yade',[
			env.SharedLibrary('_qt',['qt3/QtGUI-python.cpp'],SHLIBPREFIX='',LIBS=env['LIBS']+['QtGUI'],CPPPATH=env['CPPPATH']+[env['buildDir']+'/gui/qt3']), # CPPPATH is for files generated by moc which are indirectly included
			env.File('qt.py','qt3'),
		])

	env.InstallAs('$PREFIX/bin/yade$SUFFIX-multi',env.File('yade-multi','py'))

	# python modules are one level deeper so that you can say: from yade.wrapper import *
	env.Install('$PREFIX/lib/yade$SUFFIX/gui/yade',[
		env.SharedLibrary('wrapper',['py/yadeControl.cpp'],SHLIBPREFIX='',
			LIBS=env['LIBS']+['libboost_python','XMLFormatManager','yade-factory','yade-serialization','Shop',
				'BoundingVolumeMetaEngine',
				'GeometricalModelMetaEngine',
				'InteractingGeometryMetaEngine',
				'InteractionGeometryMetaEngine',
				'InteractionPhysicsMetaEngine',
				'PhysicalParametersMetaEngine',
				'ConstitutiveLawDispatcher',
				'InteractionDispatchers',
				'STLImporter',
				'ParallelEngine'
			],
			),
		env.SharedLibrary('_utils',['py/_utils.cpp'],SHLIBPREFIX='',
			LIBS=env['LIBS']+['Shop','libboost_python','Brefcom']),
		env.SharedLibrary('_eudoxos',['py/_eudoxos.cpp'],SHLIBPREFIX='',
			LIBS=env['LIBS']+['Shop','libboost_python','Brefcom']),
		env.SharedLibrary('log',['py/log.cpp'],SHLIBPREFIX=''),
		env.File('__init__.py','py'),
		env.File('utils.py','py'),
		env.File('eudoxos.py','py'),
		env.File('runtime.py','py'),
		env.File('ipython.py','py'),
		env.File('plot.py','py'),
		env.File('linterpolation.py','py'),
		env.File('timing.py','py'),
		env.File('PythonTCPServer.py','py'),
	])

