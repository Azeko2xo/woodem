# vim:syntax=python
Import('*')

if 'EMBED_PYTHON' in env['CPPDEFINES']: linkPythonUI=['PythonUI']
else: linkPythonUI=[]

if 'qt3' not in env['exclude']:
	env.Install('$PREFIX/lib/yade$SUFFIX/gui',[
		env.SharedLibrary('QtGUI',
			['qt3/FileDialog.cpp',
				'qt3/GLViewer.cpp',
				'qt3/MessageDialog.cpp',
				'qt3/QtFileGenerator.cpp',
				'qt3/QtFileGeneratorController.ui',
				'qt3/QtGUI.cpp',
				'qt3/QtGUIPreferences.cpp',
				'qt3/QtGeneratedMessageDialog.ui',
				'qt3/QtGeneratedSimulationController.ui',
				'qt3/SimulationController.cpp',
				'qt3/YadeQtGeneratedMainWindow.ui',
				'qt3/YadeQtMainWindow.cpp',
				'qt3/YadeCamera.cpp',
				'qt3/GLSimulationPlayerViewer.cpp',
				'qt3/QtGeneratedSimulationPlayer.ui',
				'qt3/QtSimulationPlayer.cpp',
				],
			LIBS=env['LIBS']+linkPythonUI+[
				'yade-opengl',
				'yade-serialization',
				'XMLFormatManager',
				'yade-serialization-qt',
				'GravityEngines',
				'OpenGLRenderingEngine',
				'PositionOrientationRecorder',
				'sqlite3x',
				'FilterEngine',
				'$QGLVIEWER_LIB'],
			CPPPATH=env['CPPPATH']+['qt3']
		),
		env.SharedLibrary('SnapshotEngine',['qt3/SnapshotEngine.cpp'],LIBS=env['LIBS']+['QtGUI'],CPPPATH=env['CPPPATH']+['qt3']),
	])

import os.path

if 'EMBED_PYTHON' in env['CPPDEFINES']:
	env.Install('$PREFIX/lib/yade$SUFFIX/gui',[
		env.SharedLibrary('PythonUI',['py/PythonUI.cpp']),
		env.SharedLibrary('PeriodicPythonRunner',['py/PeriodicPythonRunner.cpp']),
		env.File('PythonUI_rc.py','py'),
	])
	if 'qt3' not in env['exclude']:
		env.Install('$PREFIX/lib/yade$SUFFIX/py/yade',[
			env.SharedLibrary('_qt',['qt3/QtGUI-python.cpp'],SHLIBPREFIX='',LIBS=env['LIBS']+['QtGUI'],CPPPATH=env['CPPPATH']+[env['buildDir']+'/gui/qt3']), # CPPPATH is for files generated by moc which are indirectly included
			env.File('qt.py','qt3'),
		])

	env.InstallAs('$PREFIX/bin/yade$SUFFIX-multi',env.File('yade-multi','py'))

	# python modules are one level deeper so that you can say: from yade.wrapper import *
	env.Install('$PREFIX/lib/yade$SUFFIX/py/yade',[
		env.SharedLibrary('wrapper',['py/yadeControl.cpp'],SHLIBPREFIX='',
			LIBS=env['LIBS']+['XMLFormatManager','yade-factory','yade-serialization','Shop',
				'BoundingVolumeMetaEngine',
				'GeometricalModelMetaEngine',
				'InteractingGeometryMetaEngine',
				'InteractionGeometryMetaEngine',
				'InteractionPhysicsMetaEngine',
				'PhysicalParametersMetaEngine',
				'ConstitutiveLawDispatcher',
				'InteractionDispatchers',
				'STLImporter',
				'ParallelEngine',
				'Clump'
			],
			),
		env.SharedLibrary('_utils',['py/_utils.cpp'],SHLIBPREFIX='',LIBS=env['LIBS']+['Shop','ConcretePM']),
		env.SharedLibrary('_packPredicates',['py/_packPredicates.cpp'],SHLIBPREFIX='',
			# if we compile with GTS, link to the python module, as inGtsSurface uses some of its symbols.
			# because the module doesn't have the lib- suffix, we put it directly to SHLINKFLAGS
			# using the -l: syntax (see man ld) and declare the dependency below
			SHLINKFLAGS=env['SHLINKFLAGS']+(['-l:$PREFIX/lib/yade$SUFFIX/py/gts/_gts.so'] if 'GTS' in env['features'] else [])),
		env.SharedLibrary('_eudoxos',['py/_eudoxos.cpp'],SHLIBPREFIX='',CXXFLAGS=env['CXXFLAGS']+([] if not os.path.exists('../../brefcom-mm.hh') else ['-include','../brefcom-mm.hh']),LIBS=env['LIBS']+['Shop','ConcretePM']),
		env.SharedLibrary('log',['py/log.cpp'],SHLIBPREFIX=''),
		env.File('__init__.py','py'),
		env.File('utils.py','py'),
		env.File('eudoxos.py','py'),
		env.File('runtime.py','py'),
		env.File('ipython.py','py'),
		env.File('plot.py','py'),
		env.File('linterpolation.py','py'),
		env.File('timing.py','py'),
		env.File('PythonTCPServer.py','py'),
		env.File('pack.py','py'),
	])
	if os.path.exists('../../brefcom-mm.hh'): Depends('py/_eudoxos.cpp','../../brefcom-mm.hh')
	# see comments for _packPredicates above
	if 'GTS' in env['features']: env.Depends('_packPredicates.so','$PREFIX/lib/yade$SUFFIX/py/gts/_gts.so')


