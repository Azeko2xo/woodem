# vim: set filetype=python :
Import('*')

import os.path,os
#  Dir('#') expands to the root of the source tree -- that is done by scons
if os.path.exists(Dir('#').abspath+'/extra/triangulation/libTesselationWrapper.a'):
	print "Will build VolumetricContactLaw since libTesselationWrapper.a was found."
	env.Install('$PREFIX/lib/yade$SUFFIX/pkg-dem',[
		env.SharedLibrary('VolumicContactLaw',
			['Engine/StandAloneEngine/VolumicContactLaw.cpp'],
			LIBPATH=env['LIBPATH']+['../extra/triangulation'],
			LIBS=env['LIBS']+['SDECLinkPhysics',
				'ElasticContactInteraction',
				'SDECLinkGeometry',
				'SpheresContactGeometry',
				'BodyMacroParameters',
				'yade-serialization',
				'yade-base',
				'GLDrawInteractingSphere',
				'yade-multimethods',
				'Force',
				'Momentum',
				'Sphere',
				'RigidBodyParameters',
				'InteractingSphere',
				'TesselationWrapper',
				'CGAL'])
		])

env.Install('$PREFIX/lib/yade$SUFFIX/pkg-dem',[

	env.SharedLibrary('SQLiteRecorder',
		['Engine/StandAloneEngine/SQLiteRecorder.cpp'],
		LIBS=env['LIBS']+['sqlite3x']),

	env.SharedLibrary('InteractingMyTetrahedron',
		['DataClass/InteractingGeometry/InteractingMyTetrahedron.cpp']),

	env.SharedLibrary('BodyMacroParameters',
		['DataClass/PhysicalParameters/BodyMacroParameters.cpp'],
		LIBS=env['LIBS']+['RigidBodyParameters',
			'ElasticBodyParameters',
			'yade-serialization',
			'yade-base',
			'yade-multimethods']),
	
	env.SharedLibrary('CohesiveFrictionalBodyParameters',
		['DataClass/PhysicalParameters/CohesiveFrictionalBodyParameters.cpp'],
		LIBS=env['LIBS']+['RigidBodyParameters',
			'BodyMacroParameters',
			'yade-serialization',
			'yade-base',
			'yade-multimethods']),

	env.SharedLibrary('SpheresContactGeometry',
		['DataClass/InteractionGeometry/SpheresContactGeometry.cpp'],
		LIBS=env['LIBS']+['yade-serialization','yade-base']),

	env.SharedLibrary('SDECLinkGeometry',
		['DataClass/InteractionGeometry/SDECLinkGeometry.cpp'],
		LIBS=env['LIBS']+['yade-serialization','yade-base']),

	env.SharedLibrary('InteractionOfMyTetrahedron',
		['DataClass/InteractionGeometry/InteractionOfMyTetrahedron.cpp'],
		LIBS=env['LIBS']+['yade-serialization', 'yade-base']),

	env.SharedLibrary('ElasticContactInteraction',
		['DataClass/InteractionPhysics/ElasticContactInteraction.cpp'],
		LIBS=env['LIBS']+['NormalShearInteractions']),
		
	env.SharedLibrary('CohesiveFrictionalContactInteraction',
		['DataClass/InteractionPhysics/CohesiveFrictionalContactInteraction.cpp'],
		LIBS=env['LIBS']+['ElasticContactInteraction']),

	env.SharedLibrary('ContactLaw1Interaction',
		['DataClass/InteractionPhysics/ContactLaw1Interaction.cpp'],
		LIBS=env['LIBS']+['ElasticContactInteraction']),


	env.SharedLibrary('SDECLinkPhysics',
		['DataClass/InteractionPhysics/SDECLinkPhysics.cpp'],
		LIBS=env['LIBS']+['NormalShearInteractions']),

	env.SharedLibrary('GlobalStiffness',
		['DataClass/PhysicalAction/GlobalStiffness.cpp'],
		LIBS=env['LIBS']+['yade-base']),

	env.SharedLibrary('MacroMicroElasticRelationships',
		['Engine/EngineUnit/MacroMicroElasticRelationships.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'SDECLinkGeometry',
			'ElasticContactInteraction',
			'SpheresContactGeometry',
			'BodyMacroParameters',
			'RigidBodyParameters',
			'ParticleParameters',
			'InteractionPhysicsMetaEngine']),

	env.SharedLibrary('SimpleElasticRelationships',
		['Engine/EngineUnit/SimpleElasticRelationships.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'SDECLinkGeometry',
			'ElasticContactInteraction',
			'SpheresContactGeometry',
			'BodyMacroParameters',
			'RigidBodyParameters',
			'ParticleParameters',
			'InteractionPhysicsMetaEngine']),

	env.SharedLibrary('InteractingBox2InteractingSphere4SpheresContactGeometry',
		['Engine/EngineUnit/InteractingBox2InteractingSphere4SpheresContactGeometry.cpp'],
		LIBS=env['LIBS']+['SpheresContactGeometry',
			'InteractionGeometryMetaEngine',
			'yade-base',
			'yade-multimethods',
			'InteractingSphere',
			'InteractingBox']),

	env.SharedLibrary('InteractingSphere2InteractingSphere4SpheresContactGeometry',
		['Engine/EngineUnit/InteractingSphere2InteractingSphere4SpheresContactGeometry.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'SpheresContactGeometry',
			'InteractionGeometryMetaEngine',
			'yade-base',
			'yade-multimethods',
			'InteractingSphere']),
			
	env.SharedLibrary('InteractingFacet2InteractingSphere4SpheresContactGeometry'
	    ,['Engine/EngineUnit/InteractingFacet2InteractingSphere4SpheresContactGeometry.cpp']
	    ,LIBS=env['LIBS']+['InteractingFacet'
				,'InteractingSphere'
				,'InteractionGeometryMetaEngine'
				,'SpheresContactGeometry']),

	env.SharedLibrary('InteractingMyTetrahedron2AABB',
		['Engine/EngineUnit/InteractingMyTetrahedron2AABB.cpp'],
		LIBS=env['LIBS']+['BoundingVolumeMetaEngine',
			'InteractingMyTetrahedron',
			'AABB',
			'yade-base']),

	env.SharedLibrary('InteractingMyTetrahedron2InteractingMyTetrahedron4InteractionOfMyTetrahedron',
		['Engine/EngineUnit/InteractingMyTetrahedron2InteractingMyTetrahedron4InteractionOfMyTetrahedron.cpp'],
		LIBS=env['LIBS']+['InteractionOfMyTetrahedron',
			'InteractionGeometryMetaEngine',
			'yade-base',
			'yade-multimethods',
			'InteractingMyTetrahedron',
			'yade-base']),

	env.SharedLibrary('InteractingMyTetrahedron2InteractingBox4InteractionOfMyTetrahedron',
		['Engine/EngineUnit/InteractingMyTetrahedron2InteractingBox4InteractionOfMyTetrahedron.cpp'],
		LIBS=env['LIBS']+['InteractionOfMyTetrahedron',
			'InteractionGeometryMetaEngine',
			'InteractingBox2InteractingSphere4SpheresContactGeometry',
			'InteractingBox',
			'InteractingSphere',
			'SpheresContactGeometry',
			'yade-base',
			'yade-multimethods',
			'InteractingMyTetrahedron']),

	env.SharedLibrary('Tetrahedron2InteractingMyTetrahedron',
		['Engine/EngineUnit/Tetrahedron2InteractingMyTetrahedron.cpp'],
		LIBS=env['LIBS']+['InteractingMyTetrahedron', 'InteractingGeometryMetaEngine', 'Tetrahedron']),

	env.SharedLibrary('ElasticCohesiveLaw',
		['Engine/StandAloneEngine/ElasticCohesiveLaw.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'ElasticContactInteraction',
			'SDECLinkGeometry',
			'SpheresContactGeometry',
			'BodyMacroParameters',
			'yade-base',
			'yade-multimethods',
			'Force',
			'Momentum',
			'Sphere',
			'RigidBodyParameters']),
			
	env.SharedLibrary('CohesiveFrictionalRelationships',
		['Engine/EngineUnit/CohesiveFrictionalRelationships.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'SDECLinkGeometry',
			'CohesiveFrictionalContactInteraction',
			'SpheresContactGeometry',
			'CohesiveFrictionalBodyParameters',
			'RigidBodyParameters',
			'ParticleParameters',
			'InteractionPhysicsMetaEngine']),

	env.SharedLibrary('CL1Relationships',
		['Engine/EngineUnit/CL1Relationships.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'SDECLinkGeometry',
			'ContactLaw1Interaction',
			'SpheresContactGeometry',
			'CohesiveFrictionalBodyParameters',
			'RigidBodyParameters',
			'ParticleParameters',
			'InteractionPhysicsMetaEngine']),

	env.SharedLibrary('ElasticContactLaw',
		['Engine/StandAloneEngine/ElasticContactLaw.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'ElasticContactInteraction',
			'SDECLinkGeometry',
			'SpheresContactGeometry',
			'BodyMacroParameters',
			'yade-serialization',
			'yade-base',
			'GLDrawInteractingSphere',
			'yade-multimethods',
			'Force',
			'Momentum',
			'Sphere',
			'RigidBodyParameters']),
	

	env.SharedLibrary('CohesiveFrictionalContactLaw',
		['Engine/StandAloneEngine/CohesiveFrictionalContactLaw.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'CohesiveFrictionalContactInteraction',
			'SDECLinkGeometry',
			'SpheresContactGeometry',
			'CohesiveFrictionalBodyParameters',
			'yade-serialization',
			'yade-base',
			
			'yade-multimethods',
			'Force',
			'Momentum',
			'Sphere',
			'RigidBodyParameters']),

	env.SharedLibrary('MyTetrahedronLaw',
		['Engine/StandAloneEngine/MyTetrahedronLaw.cpp'],
		LIBS=env['LIBS']+['ElasticContactInteraction',
			'InteractionOfMyTetrahedron',
			'ElasticBodyParameters',
			'yade-serialization',
			'yade-base',
			'yade-multimethods',
			'Force',
			'Momentum',
			'Sphere',
			'RigidBodyParameters']),

	env.SharedLibrary('ElasticCriterionTimeStepper',
		['Engine/StandAloneEngine/ElasticCriterionTimeStepper.cpp'],
		LIBS=env['LIBS']+['ElasticContactInteraction',
			'SpheresContactGeometry',
			'MacroMicroElasticRelationships',
			'Sphere']),

	env.SharedLibrary('AveragePositionRecorder',
		['Engine/StandAloneEngine/AveragePositionRecorder.cpp'],
		LIBS=env['LIBS']+['RigidBodyParameters']),

	env.SharedLibrary('PositionRecorder',
		['Engine/StandAloneEngine/PositionRecorder.cpp'],
		LIBS=env['LIBS']+['RigidBodyParameters']),

	env.SharedLibrary('ForceRecorder',
		['Engine/StandAloneEngine/ForceRecorder.cpp'],
		LIBS=env['LIBS']+['RigidBodyParameters', 'Force']),

	env.SharedLibrary('PositionOrientationRecorder',
		['Engine/StandAloneEngine/PositionOrientationRecorder.cpp'],
		LIBS=env['LIBS']+['RigidBodyParameters']),

	env.SharedLibrary('PositionSnapshot',
		['Engine/StandAloneEngine/PositionSnapshot.cpp'],
		LIBS=env['LIBS']+[
			'RigidBodyParameters'
			,'Sphere']),

	env.SharedLibrary('ForceSnapshot',
		['Engine/StandAloneEngine/ForceSnapshot.cpp'],
		LIBS=env['LIBS']+[
			'RigidBodyParameters'
			,'ElasticContactInteraction'
			,'Sphere']),

	env.SharedLibrary('VelocityRecorder',
		['Engine/StandAloneEngine/VelocityRecorder.cpp'],
		LIBS=env['LIBS']+['ParticleParameters']),

	env.SharedLibrary('GlobalStiffnessCounter',
		['Engine/StandAloneEngine/GlobalStiffnessCounter.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'ElasticContactInteraction',
			'SDECLinkGeometry',
			'SpheresContactGeometry',
			'BodyMacroParameters',
			'yade-serialization',
			'yade-base',		
			'yade-multimethods',
			'Force',
			'Momentum',
			'Sphere',
			'RigidBodyParameters',
			'GlobalStiffness' ]),

	env.SharedLibrary('GlobalStiffnessTimeStepper',
		['Engine/StandAloneEngine/GlobalStiffnessTimeStepper.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'ElasticContactInteraction',
			'SpheresContactGeometry',
			'MacroMicroElasticRelationships',
			'Sphere',
			'GlobalStiffness']),

	env.SharedLibrary('GeometricalModelForceColorizer',
		['Engine/StandAloneEngine/GeometricalModelForceColorizer.cpp'],
		LIBS=env['LIBS']+['RigidBodyParameters', 'Force']),

	env.SharedLibrary('ResultantForceEngine',
		['Engine/DeusExMachina/ResultantForceEngine.cpp'],
		LIBS=env['LIBS']+[
			'yade-base',		
			'Force',
			'ParticleParameters',
			'GlobalStiffness']),

	env.SharedLibrary('TriaxialStressController',
		['Engine/DeusExMachina/TriaxialStressController.cpp'],
		LIBS=env['LIBS']+[
			'yade-base',
			'Force',
			'ParticleParameters',
			'RigidBodyParameters',
			'ElasticContactInteraction',
			'InteractingSphere',
			'InteractingBox',
			'SpheresContactGeometry',
			'Sphere']),

	env.SharedLibrary('TriaxialCompressionEngine',
		['Engine/DeusExMachina/TriaxialCompressionEngine.cpp'],
		LIBS=env['LIBS']+[
			'yade-base',
			'Force',
			'ParticleParameters',
			'ElasticContactInteraction',
			'TriaxialStressController',
			'Shop']),

	env.SharedLibrary('GLDrawInteractingMyTetrahedron',
		['RenderingEngine/GLDrawInteractingMyTetrahedron/GLDrawInteractingMyTetrahedron.cpp'],
		LIBS=env['LIBS']+['InteractingMyTetrahedron', 'yade-opengl']),

	env.SharedLibrary('GLDrawCohesiveFrictionalContactInteraction',
		['RenderingEngine/GLDrawCohesiveFrictionalContactInteraction/GLDrawCohesiveFrictionalContactInteraction.cpp'],
		LIBS=env['LIBS']+['CohesiveFrictionalContactInteraction','SpheresContactGeometry',
			'GLDrawElasticContactInteraction',
			'ElasticContactInteraction',
			'yade-opengl','$QGLVIEWER_LIB']),

	env.SharedLibrary('GLDrawElasticContactInteraction',
		['RenderingEngine/GLDrawElasticContactInteraction/GLDrawElasticContactInteraction.cpp'],
		LIBS=env['LIBS']+['SpheresContactGeometry',
			'ElasticContactInteraction',
			'yade-opengl','$QGLVIEWER_LIB']),

	env.SharedLibrary('GLDrawSpheresContactGeometry',
		['RenderingEngine/GLDrawSpheresContactGeometry/GLDrawSpheresContactGeometry.cpp'],
		LIBS=env['LIBS']+['SpheresContactGeometry',
			'ElasticContactInteraction',
			'yade-opengl']),

	env.SharedLibrary('GLDrawSDECLinkGeometry',
		['RenderingEngine/GLDrawSDECLinkGeometry/GLDrawSDECLinkGeometry.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'SDECLinkPhysics',
			'yade-opengl']),

	env.SharedLibrary('Funnel',
		['PreProcessor/Funnel.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'ElasticContactLaw',
			'MacroMicroElasticRelationships',
			'ElasticCriterionTimeStepper',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'yade-serialization',
			'yade-base',
			
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'ParticleParameters',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'yade-multimethods']),

	env.SharedLibrary('SDECImpactTest',
		['PreProcessor/SDECImpactTest.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'ElasticContactLaw',
			'AveragePositionRecorder',
			'VelocityRecorder',
			'ForceRecorder',
			'MacroMicroElasticRelationships',
			'ElasticCriterionTimeStepper',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'BodyRedirectionVector',
			'yade-base',
			'InteractingSphere',
			'InteractingBox',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'yade-serialization',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'yade-multimethods',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'SAPCollider',
			'MetaInteractingGeometry2AABB']),

	env.SharedLibrary('DirectShearCis',
		['PreProcessor/DirectShearCis.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'BodyMacroParameters',
			'ElasticContactLaw',
			'MacroMicroElasticRelationships',
			'SimpleElasticRelationships',
			'ElasticCriterionTimeStepper',
			'PositionOrientationRecorder',
			'PositionRecorder',
			'PositionSnapshot',
			'ForceSnapshot',
			'ForceRecorder',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'CinemDNCEngine',
			'yade-serialization',
			'yade-base',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'ParticleParameters',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'yade-multimethods']),


	env.SharedLibrary('SimpleShear',
		['PreProcessor/SimpleShear.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'CohesiveFrictionalBodyParameters',
			'ContactLaw1',
			'CL1Relationships',
			'GlobalStiffness',
			'GlobalStiffnessCounter',
			'GlobalStiffnessTimeStepper',
			'PositionOrientationRecorder',
			'PositionRecorder',
			'PositionSnapshot',
			'ForceSnapshot',
			'ForceRecorder',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'NewtonsDampedLaw',
			'MetaInteractingGeometry',
			'GravityEngines',
			'CinemDNCEngine',
			'yade-serialization',
			'yade-base',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'ParticleParameters',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'yade-multimethods']),


	env.SharedLibrary('SDECLinkedSpheres',
		['PreProcessor/SDECLinkedSpheres.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'ElasticContactLaw',
			'ElasticCohesiveLaw',
			'MacroMicroElasticRelationships',
			'ElasticCriterionTimeStepper',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'yade-serialization',
			'SpheresContactGeometry',
			'yade-base',
			
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'ParticleParameters',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'yade-multimethods']),

	env.SharedLibrary('SDECSpheresPlane',
		['PreProcessor/SDECSpheresPlane.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'ElasticContactLaw',
			'MacroMicroElasticRelationships',
			'ElasticCriterionTimeStepper',
			'PositionOrientationRecorder',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'yade-serialization',
			'yade-base',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'ParticleParameters',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'yade-multimethods']),

	env.SharedLibrary('SDECMovingWall',
		['PreProcessor/SDECMovingWall.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'ElasticContactLaw',
			'MacroMicroElasticRelationships',
			'ElasticCriterionTimeStepper',
			'PositionOrientationRecorder',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'TranslationEngine',
			'yade-serialization',
			'yade-base',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'ParticleParameters',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'yade-multimethods']),

	env.SharedLibrary('TetrahedronsTest',
		['PreProcessor/TetrahedronsTest.cpp'],
		LIBS=env['LIBS']+['MyTetrahedronLaw',
			'MacroMicroElasticRelationships',
			'ElasticCriterionTimeStepper',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'BodyRedirectionVector',
			'InteractingMyTetrahedron',
			'InteractingSphere',
			'InteractingBox',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractingGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'ParticleParameters',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'Tetrahedron',
			'yade-serialization',
			'yade-base',
			'yade-multimethods']),

	env.SharedLibrary('TriaxialTest',
		['PreProcessor/TriaxialTest.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'ElasticContactLaw',
			'AveragePositionRecorder',
			'VelocityRecorder',
			'ForceRecorder',
			'SimpleElasticRelationships',
			'ElasticCriterionTimeStepper',
			'PhysicalActionVectorVector',
			'MakeItFlat',
			'InteractionVecSet',
			'InteractionHashMap',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'NewtonsDampedLaw',
			'MetaInteractingGeometry',
			'GravityEngines',
			'yade-serialization',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'yade-multimethods',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'GlobalStiffness',
			'GlobalStiffnessCounter',
			'ResultantForceEngine',
			'TriaxialStressController',
			'TriaxialCompressionEngine',
			'GlobalStiffnessTimeStepper',
			'yade-base',
			'TriaxialStateRecorder',
			'PositionOrientationRecorder',
			'Shop',
			'NewtonsDampedLaw']),
			
	env.SharedLibrary('SnowCreepTest',
		['PreProcessor/SnowCreepTest.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'CohesiveFrictionalContactLaw',
			'AveragePositionRecorder',
			'VelocityRecorder',
			'ForceRecorder',
			'CohesiveFrictionalRelationships',
			'ElasticCriterionTimeStepper',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'InteractionHashMap',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'InteractingSphere2InteractingSphere4SpheresContactGeometry',
			'InteractingBox2InteractingSphere4SpheresContactGeometry',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'yade-serialization',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'yade-multimethods',
			'Box',
			'Sphere',
			'AABB',
			'DistantPersistentSAPCollider',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'GlobalStiffness',
			'GlobalStiffnessCounter',
			'ResultantForceEngine',
			'TriaxialStressController',
			'TriaxialCompressionEngine',
			'GlobalStiffnessTimeStepper',
			'yade-base',
			'Shop',
			'TriaxialStateRecorder',
			'PositionOrientationRecorder',
			'HydraulicForceEngine']),

	env.SharedLibrary('CohesiveTriaxialTest',
		['PreProcessor/CohesiveTriaxialTest.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'CohesiveFrictionalContactLaw',
			'AveragePositionRecorder',
			'VelocityRecorder',
			'ForceRecorder',
			'CohesiveFrictionalRelationships',
			'ElasticCriterionTimeStepper',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'InteractionHashMap',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'InteractingSphere2InteractingSphere4SpheresContactGeometry',
			'InteractingBox2InteractingSphere4SpheresContactGeometry',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'yade-serialization',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'yade-multimethods',
			'Box',
			'Sphere',
			'AABB',
			'DistantPersistentSAPCollider',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'GlobalStiffness',
			'GlobalStiffnessCounter',
			'ResultantForceEngine',
			'TriaxialStressController',
			'TriaxialCompressionEngine',
			'GlobalStiffnessTimeStepper',
			'yade-base',
			'Shop',
			'TriaxialStateRecorder',
			'PositionOrientationRecorder',
			'HydraulicForceEngine']),

	env.SharedLibrary('ThreePointBending',
		['PreProcessor/ThreePointBending.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'ElasticContactLaw',
			'ElasticCohesiveLaw',
			'MacroMicroElasticRelationships',
			'ElasticCriterionTimeStepper',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'yade-serialization',
			'yade-base',
			'Shop',
			
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'Box',
			'Sphere',
			'AABB',
			'PersistentSAPCollider',
			'ParticleParameters',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'yade-multimethods',
			'TranslationEngine']),


env.SharedLibrary('WallStressRecorder',
		['Engine/DeusExMachina/WallStressRecorder.cpp'],
		LIBS=env['LIBS']+['ParticleParameters',
			'ElasticContactInteraction',
			'SpheresContactGeometry',
			'BodyMacroParameters',
			'Force',
			'TriaxialStressController',
			'TriaxialCompressionEngine',
			'Sphere',
			'ElasticContactLaw']),
			
env.SharedLibrary('TriaxialStateRecorder',
		['Engine/DeusExMachina/TriaxialStateRecorder.cpp'],
		LIBS=env['LIBS']+['TriaxialCompressionEngine']),

env.SharedLibrary('CapillaryPressureEngine',
		['Engine/DeusExMachina/CapillaryPressureEngine.cpp'],
		LIBS=env['LIBS']+['CapillaryCohesiveLaw']),


env.SharedLibrary('CapillaryStressRecorder',
		['Engine/DeusExMachina/CapillaryStressRecorder.cpp'],
		LIBS=env['LIBS']+['ParticleParameters',
			'ElasticContactInteraction',
			'CapillaryParameters',
			'Force',
			'CapillaryCohesiveLaw']),

env.SharedLibrary('TriaxialTestWater',
		['PreProcessor/TriaxialTestWater.cpp'],
		LIBS=env['LIBS']+Split('''SDECLinkGeometry
        ElasticContactLaw
        CapillaryCohesiveLaw
        AveragePositionRecorder
        VelocityRecorder
        ForceRecorder
        TriaxialStateRecorder
        CapillaryStressRecorder
        ContactStressRecorder
        MacroMicroElasticRelationships
        ElasticCriterionTimeStepper
        PhysicalActionVectorVector
        InteractionVecSet
	InteractionHashMap
        BodyRedirectionVector
        InteractingSphere
        InteractingBox
        CundallNonViscousDamping
        CundallNonViscousDamping
        MetaInteractingGeometry
        GravityEngines
        yade-serialization
        PhysicalActionContainerInitializer
        PhysicalActionContainerReseter
        InteractionGeometryMetaEngine
        InteractionPhysicsMetaEngine
        PhysicalActionApplier
        PhysicalParametersMetaEngine
        BoundingVolumeMetaEngine
        yade-multimethods
        Box
        Sphere
        AABB
        PersistentSAPCollider
        SAPCollider
        MetaInteractingGeometry2AABB
	GlobalStiffness
	GlobalStiffnessCounter
	ResultantForceEngine
	TriaxialStressController
	MacroMicroElasticRelationshipsWater
	TriaxialCompressionEngine
	GlobalStiffnessTimeStepper''')),

env.SharedLibrary('ContactStressRecorder',
		['Engine/DeusExMachina/ContactStressRecorder.cpp'],
		LIBS=env['LIBS']+['ParticleParameters',
			'ElasticContactInteraction',
			'SpheresContactGeometry',
			'BodyMacroParameters',
			'Force',
			'TriaxialStressController',
			'TriaxialCompressionEngine',
			'Sphere',
			'ElasticContactLaw',
			'CapillaryCohesiveLaw']),

env.SharedLibrary('CapillaryCohesiveLaw',
		['Engine/StandAloneEngine/CapillaryCohesiveLaw.cpp'],
		LIBS=env['LIBS']+['CapillaryParameters',
			'ElasticContactInteraction',
			'SpheresContactGeometry',
			'BodyMacroParameters',
			'Force',
			'Momentum',
			'RigidBodyParameters',
			'Sphere',
			'ElasticContactLaw']),

env.SharedLibrary('CapillaryParameters',
		['DataClass/InteractionPhysics/CapillaryParameters.cpp'],
		LIBS=env['LIBS']+['ElasticContactInteraction']),

env.SharedLibrary('InteractingSphere2InteractingSphere4SpheresContactGeometryWater',
		['Engine/EngineUnit/InteractingSphere2InteractingSphere4SpheresContactGeometryWater.cpp'],
		LIBS=env['LIBS']+['SpheresContactGeometry',
			'InteractionGeometryMetaEngine',
			'InteractingSphere' ]),

env.SharedLibrary('InteractingBox2InteractingSphere4SpheresContactGeometryWater',
		['Engine/EngineUnit/InteractingBox2InteractingSphere4SpheresContactGeometryWater.cpp'],
		LIBS=env['LIBS']+['SpheresContactGeometry',
			'InteractionGeometryMetaEngine',
			'InteractingSphere',
			'InteractingBox' ]),

env.SharedLibrary('MacroMicroElasticRelationshipsWater',
		['Engine/EngineUnit/MacroMicroElasticRelationshipsWater.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'SDECLinkGeometry',
			'ElasticContactInteraction',
			'SpheresContactGeometry',
			'BodyMacroParameters',
			'RigidBodyParameters',
			'ParticleParameters',
			'InteractionPhysicsMetaEngine',
			'CapillaryParameters']),

env.SharedLibrary('InteractingSphere2AABBwater',
		['Engine/EngineUnit/InteractingSphere2AABBwater.cpp'],
		LIBS=env['LIBS']+['InteractingSphere', 'AABB', 'BoundingVolumeMetaEngine']),
		
env.SharedLibrary('HydraulicForceEngine',
		['Engine/DeusExMachina/HydraulicForceEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',  'Force', 'Momentum', 'ParticleParameters', 'CohesiveFrictionalBodyParameters', 'TriaxialCompressionEngine', 'GravityEngines'],
		CPPPATH=env['CPPPATH']+['Engine/DeusExMachina',
			'DataClass/PhysicalAction',
			'$PREFIX/include',
			'DataClass/PhysicalParameters']),
			
env.SharedLibrary('MakeItFlat',
		['Engine/DeusExMachina/MakeItFlat.cpp'],
		LIBS=env['LIBS']+['yade-base',  'Force', 'ParticleParameters'],
		CPPPATH=env['CPPPATH']+['Engine/DeusExMachina',
			'DataClass/PhysicalAction',
			'$PREFIX/include',
			'DataClass/PhysicalParameters']),
			
env.SharedLibrary('StaticSpheresAttractionEngine',
		['Engine/DeusExMachina/StaticSpheresAttractionEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',  'Sphere', 'StaticAttractionEngine', 'ElasticContactInteraction'],
		CPPPATH=env['CPPPATH']+['Engine/DeusExMachina',
			'DataClass/GeometricalModel',
			'$PREFIX/include']),
			
env.SharedLibrary('HydraulicTest',
		['PreProcessor/HydraulicTest.cpp'],
		LIBS=env['LIBS']+['SDECLinkGeometry',
			'CohesiveFrictionalContactLaw',
			'AveragePositionRecorder',
			'VelocityRecorder',
			'ForceRecorder',
			'CohesiveFrictionalRelationships',
			'ElasticCriterionTimeStepper',
			'PhysicalActionVectorVector',
			'InteractionVecSet',
			'InteractionHashMap',
			'BodyRedirectionVector',
			'InteractingSphere',
			'InteractingBox',
			'CundallNonViscousDamping',
			'CundallNonViscousDamping',
			'MetaInteractingGeometry',
			'GravityEngines',
			'yade-serialization',
			'PhysicalActionContainerInitializer',
			'PhysicalActionContainerReseter',
			'InteractionGeometryMetaEngine',
			'InteractionPhysicsMetaEngine',
			'PhysicalActionApplier',
			'PhysicalParametersMetaEngine',
			'BoundingVolumeMetaEngine',
			'yade-multimethods',
			'Box',
			'Sphere',
			'AABB',
			'DistantPersistentSAPCollider',
			'SAPCollider',
			'MetaInteractingGeometry2AABB',
			'GlobalStiffness',
			'GlobalStiffnessCounter',
			'ResultantForceEngine',
			'TriaxialStressController',
			'TriaxialCompressionEngine',
			'GlobalStiffnessTimeStepper',
			'yade-base',
			'TriaxialStateRecorder',
			'PositionOrientationRecorder',
			'HydraulicForceEngine',
			'MakeItFlat',
			'TranslationEngine',]),


env.SharedLibrary('NewtonsDampedLaw',
		['Engine/DeusExMachina/NewtonsDampedLaw.cpp'],
		LIBS=env['LIBS']+['yade-serialization',
			'yade-base',		
			'yade-multimethods',
			'Force',
			'Momentum',
			'RigidBodyParameters'
			 ]),

	env.SharedLibrary('SimpleViscoelasticBodyParameters'
		,['DataClass/PhysicalParameters/SimpleViscoelasticBodyParameters.cpp']
		,LIBS=env['LIBS']+['RigidBodyParameters'])

	,env.SharedLibrary('SimpleViscoelasticInteraction'
		,['DataClass/InteractionPhysics/SimpleViscoelasticInteraction.cpp'])
    
	,env.SharedLibrary('GLDrawSimpleViscoelasticInteraction'
	    ,['RenderingEngine/GLDrawSimpleViscoelasticInteraction/GLDrawSimpleViscoelasticInteraction.cpp']
	    ,LIBS=env['LIBS']+['yade-opengl','SimpleViscoelasticInteraction'])

	,env.SharedLibrary('SimpleViscoelasticRelationships'
		,['Engine/EngineUnit/SimpleViscoelasticRelationships.cpp']
		,LIBS=env['LIBS']+['SimpleViscoelasticBodyParameters'
		    ,'SimpleViscoelasticInteraction'
		    ,'SpheresContactGeometry'
		    ])

	,env.SharedLibrary('SimpleViscoelasticContactLaw'
		,['Engine/StandAloneEngine/SimpleViscoelasticContactLaw.cpp']
		,LIBS=env['LIBS']+['SimpleViscoelasticInteraction'
		    ,'SimpleViscoelasticBodyParameters'
		    ,'SpheresContactGeometry'
		    ,'Force'
		    ,'Momentum'
		    ])
	
	,env.SharedLibrary('ContactLaw1',
		['Engine/StandAloneEngine/ContactLaw1.cpp'],
		LIBS=env['LIBS']+['SDECLinkPhysics',
			'ContactLaw1Interaction',
			'SDECLinkGeometry',
			'SpheresContactGeometry',
			'CohesiveFrictionalBodyParameters',
			'yade-serialization',
			'yade-base',
			'yade-multimethods',
			'Force',
			'Momentum',
			'Sphere',
			'RigidBodyParameters'])



	,env.SharedLibrary('SimpleViscoelasticSpheresInteractionRecorder'
	    ,['Engine/StandAloneEngine/SimpleViscoelasticSpheresInteractionRecorder.cpp']
	    ,LIBS=env['LIBS']+['SpheresContactGeometry','SimpleViscoelasticInteraction'])

	,env.SharedLibrary('RigidBodyRecorder'
	,['Engine/StandAloneEngine/RigidBodyRecorder.cpp']
	,LIBS=env['LIBS']+['RigidBodyParameters'])

	,env.SharedLibrary('TestSimpleViscoelastic'
		,['PreProcessor/TestSimpleViscoelastic.cpp']
		,LIBS=env['LIBS']+['AABB'
			    ,'Box'
			    ,'InteractingBox'
			    ,'SimpleViscoelasticRelationships'
			    ,'SimpleViscoelasticContactLaw'
			    ,'SimpleViscoelasticBodyParameters'
			    ,'SimpleViscoelasticInteraction'
			    ,'SimpleViscoelasticSpheresInteractionRecorder'
			    ,'GravityEngines'
			    ,'BodyRedirectionVector'
			    ,'BoundingVolumeMetaEngine'
			    ,'InteractingSphere'
			    ,'InteractionGeometryMetaEngine'
			    ,'InteractionPhysicsMetaEngine'
			    ,'InteractionVecSet'
			    ,'MetaInteractingGeometry'
			    ,'MetaInteractingGeometry2AABB'
			    ,'ParticleParameters'
			    ,'RigidBodyRecorder'
			    ,'PhysicalActionApplier'
			    ,'PhysicalActionContainerInitializer'
			    ,'PhysicalActionContainerReseter'
			    ,'PhysicalActionVectorVector'
			    ,'PhysicalParametersMetaEngine'
			    ,'PersistentSAPCollider'
			    ,'Sphere'
			    ])

	,env.SharedLibrary('STLImporterTest'
	    ,['PreProcessor/STLImporterTest.cpp']
	    ,LIBS=env['LIBS']+['AABB'
				,'STLImporter'
				,'BodyRedirectionVector'
				,'BoundingVolumeMetaEngine'
				,'CundallNonViscousDamping'
				,'CundallNonViscousDamping'
				,'ElasticContactLaw'
				,'ElasticCriterionTimeStepper'
				,'Facet'
				,'GravityEngines'
				,'InteractingFacet'
				,'InteractingSphere'
				,'InteractionGeometryMetaEngine'
				,'InteractionPhysicsMetaEngine'
				,'InteractionVecSet'
				,'MacroMicroElasticRelationships'
				,'MetaInteractingGeometry'
				,'MetaInteractingGeometry2AABB'
				,'ParticleParameters'
				,'PhysicalActionApplier'
				,'PhysicalActionContainerInitializer'
				,'PhysicalActionContainerReseter'
				,'PhysicalActionVectorVector'
				,'PhysicalParametersMetaEngine'
				,'SpatialQuickSortCollider'
				,'Sphere'
				,'RotationEngine'
				])#,
				
	#env.SharedLibrary('MicroMacroAnalyser',
		#['Engine/StandAloneEngine/MicroMacroAnalyser.cpp'],
		#LIBS=env['LIBS']+['SDECLinkPhysics',
			#'ElasticContactInteraction',
			#'SDECLinkGeometry',
			#'SpheresContactGeometry',
			#'BodyMacroParameters',
			#'yade-serialization',
			#'yade-base',
			#'GLDrawInteractingSphere',
			#'yade-multimethods',
			#'Force',
			#'Momentum',
			#'Sphere',
			#'RigidBodyParameters',
			#'InteractingSphere',
			#'TesselationWrapper',
			#'TriaxialCompressionEngine',
			#'CGAL'],
			#CPPPATH=env['CPPPATH']+['/home/bruno/YADE/trunk_svn/extra/triangulation'],
			#LIBPATH=env['LIBPATH']+['/home/bruno/YADE/trunk_svn/extra/triangulation']),

	#env.Command('/home/bruno/YADE/trunk_svn/extra/triangulation/libTesselationWrapper.a',
			#['/home/bruno/YADE/trunk_svn/extra/triangulation/TesselationWrapper.cpp',
			#'/home/bruno/YADE/trunk_svn/extra/triangulation/KinematicLocalisationAnalyser.cpp',
			#'/home/bruno/YADE/trunk_svn/extra/triangulation/TriaxialState.cpp'],
			#"make",
			#chdir='/home/bruno/YADE/trunk_svn/extra/triangulation')
])

