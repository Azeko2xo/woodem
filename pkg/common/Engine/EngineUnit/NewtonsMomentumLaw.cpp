/*************************************************************************
*  Copyright (C) 2004 by Olivier Galizzi                                 *
*  olivier.galizzi@imag.fr                                               *
*  Copyright (C) 2004 by Janek Kozicki                                   *
*  cosurgi@berlios.de                                                    *
*                                                                        *
*  This program is free software; it is licensed under the terms of the  *
*  GNU General Public License v2 or later. See file LICENSE for details. *
*************************************************************************/

#include "NewtonsMomentumLaw.hpp"
#include<yade/pkg-common/RigidBodyParameters.hpp>
#include<yade/pkg-common/Momentum.hpp>
#include<yade/lib-base/yadeWm3Extra.hpp>
#include<yade/core/MetaBody.hpp>

#ifdef BEX_CONTAINER
//! Newtons law for both force and momentum
void NewtonsMomentumLaw::go(const shared_ptr<PhysicalParameters>& b, const Body* bb, MetaBody* rb){
	body_id_t id=bb->getId();
	Vector3r f=rb->bex.getForce(id); Vector3r m=rb->bex.getTorque(id);
	RigidBodyParameters *rbp = static_cast<RigidBodyParameters*>(b.get());
	if(bb->isStandalone()){ rbp->acceleration=f/rbp->mass; rbp->angularAcceleration=diagDiv(m,rbp->inertia); }
	else if(bb->isClump()){ rbp->acceleration+=f/rbp->mass; rbp->angularAcceleration+=diagDiv(m,rbp->inertia); }
	else { // isClumpMember()
		const shared_ptr<Body>& clump(Body::byId(bb->clumpId));
		RigidBodyParameters* clumpRBP=YADE_CAST<RigidBodyParameters*>(clump->physicalParameters.get());
		// accels reset by Clump::moveMembers in last iteration
		clumpRBP->acceleration+=f/clumpRBP->mass;
		clumpRBP->angularAcceleration+=diagDiv((b->se3.position-clumpRBP->se3.position).Cross(f),clumpRBP->inertia); //acceleration from torque generated by the force WRT particle centroid on the clump centroid
		/* angularAcceleration is reset by ClumpMemberMover engine */
		clumpRBP->angularAcceleration+=diagDiv(m,clumpRBP->inertia);
	}
}
#else
void NewtonsMomentumLaw::go( 	  const shared_ptr<PhysicalAction>& a
				, const shared_ptr<PhysicalParameters>& b
				, const Body* bb)
{
	Momentum * am = static_cast<Momentum*>(a.get());
	RigidBodyParameters * rb = static_cast<RigidBodyParameters*>(b.get());
	
	//FIXME : should be += and we should add an Engine that reset acceleration at the beginning
	if(bb->isStandalone()) rb->angularAcceleration=diagDiv(am->momentum,rb->inertia);
	else if(bb->isClump()) rb->angularAcceleration+=diagDiv(am->momentum,rb->inertia);
	else { // isClumpMember()
		const shared_ptr<Body>& clump(Body::byId(bb->clumpId));
		RigidBodyParameters* clumpRBP=YADE_CAST<RigidBodyParameters*>(clump->physicalParameters.get());
		/* angularAcceleration is reset by ClumpMemberMover engine */
		clumpRBP->angularAcceleration+=diagDiv(am->momentum,clumpRBP->inertia);
	}
}
#endif

YADE_PLUGIN();
