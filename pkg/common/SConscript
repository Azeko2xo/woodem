# vim: set filetype=python :
Import('*')
env.Install('$PREFIX/lib/yade$SUFFIX/pkg-common',[

	env.SharedLibrary('ParallelEngine',
		['Engine/ParallelEngine.cpp']),

	env.SharedLibrary('BodyAssocVector',
		['Container/BodyAssocVector.cpp'],
		LIBS=env['LIBS']+['yade-base']),

	env.SharedLibrary('InteractionHashMap',
		['Container/InteractionHashMap.cpp'],
		LIBS=env['LIBS']+['yade-base']),
	
## moved to core/DefaultContainerImplementations
#	env.SharedLibrary('BodyRedirectionVector',
#		['Container/BodyRedirectionVector.cpp'],
#		LIBS=env['LIBS']+['yade-base']),
#	env.SharedLibrary('InteractionVecSet',
#		['Container/InteractionVecSet.cpp'],
#		LIBS=env['LIBS']+['yade-base']),
#	env.SharedLibrary('PhysicalActionVectorVector',
#		['Container/PhysicalActionVectorVector.cpp'],
#		LIBS=env['LIBS']+['yade-base']),
## still permit linking with that
	env.SharedLibrary('BodyRedirectionVector',[]),
	env.SharedLibrary('InteractionVecSet',[]),
	env.SharedLibrary('PhysicalActionVectorVector',[]),

	env.SharedLibrary('AABB',
		['DataClass/BoundingVolume/AABB.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'yade-serialization',
			'yade-base']),

	env.SharedLibrary('BoundingSphere',
		['DataClass/BoundingVolume/BoundingSphere.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'yade-serialization']),

	env.SharedLibrary('InteractingBox',
		['DataClass/InteractingGeometry/InteractingBox.cpp'],
		LIBS=env['LIBS']+['yade-base']),

	env.SharedLibrary('InteractingSphere',
		['DataClass/InteractingGeometry/InteractingSphere.cpp'],
		LIBS=env['LIBS']+['yade-base']),

	env.SharedLibrary('MetaInteractingGeometry',
		['DataClass/InteractingGeometry/MetaInteractingGeometry.cpp'],
		LIBS=env['LIBS']+['yade-base']),
    
	env.SharedLibrary('InteractingVertex'
	    ,['DataClass/InteractingGeometry/InteractingVertex.cpp'],
		 LIBS=env['LIBS']+['yade-base']),
	
	env.SharedLibrary('InteractingEdge'
	    ,['DataClass/InteractingGeometry/InteractingEdge.cpp']),

	env.SharedLibrary('InteractingFacet'
	    ,['DataClass/InteractingGeometry/InteractingFacet.cpp']),

	env.SharedLibrary('ParticleParameters',
		['DataClass/PhysicalParameters/ParticleParameters.cpp'],
		LIBS=env['LIBS']+['yade-base']),

	env.SharedLibrary('RigidBodyParameters',
		['DataClass/PhysicalParameters/RigidBodyParameters.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'ParticleParameters',
			'yade-serialization',
			'yade-multimethods']),

	env.SharedLibrary('ElasticBodyParameters',
		['DataClass/PhysicalParameters/ElasticBodyParameters.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'RigidBodyParameters',
			'ParticleParameters',
			'yade-serialization',
			'yade-multimethods']),

	env.SharedLibrary('ClosestFeatures',
		['DataClass/InteractionGeometry/ClosestFeatures.cpp'],
		LIBS=env['LIBS']+['yade-base',		
			'yade-serialization']),

	env.SharedLibrary('SimpleElasticInteraction',
		['DataClass/InteractionPhysics/SimpleElasticInteraction.cpp'],
		LIBS=env['LIBS']+['yade-base']),

	env.SharedLibrary('Force',
		['DataClass/PhysicalAction/Force.cpp'],
		LIBS=env['LIBS']+['yade-base']),

	env.SharedLibrary('Momentum',
		['DataClass/PhysicalAction/Momentum.cpp'],
		LIBS=env['LIBS']+['yade-base']),

	env.SharedLibrary('Box',
		['DataClass/GeometricalModel/Box.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'yade-multimethods']),

	env.SharedLibrary('Mesh2D',
		['DataClass/GeometricalModel/Mesh2D.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'yade-multimethods',
			'yade-serialization']),

	env.SharedLibrary('Sphere',
		['DataClass/GeometricalModel/Sphere.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'yade-multimethods',
			'yade-serialization']),

	env.SharedLibrary('Tetrahedron',
		['DataClass/GeometricalModel/Tetrahedron.cpp'],
		LIBS=env['LIBS']+['yade-base','yade-multimethods']),

	env.SharedLibrary('Quadrilateral',
		['DataClass/GeometricalModel/Quadrilateral.cpp'],
		LIBS=env['LIBS']+['yade-base','yade-multimethods'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include','DataClass/GeometricalModel']),

	env.SharedLibrary('Vertex'
	    ,['DataClass/GeometricalModel/Vertex.cpp'],
		 LIBS=env['LIBS']+['yade-base']),
	
	env.SharedLibrary('GeometricalEdge'
	    ,['DataClass/GeometricalModel/GeometricalEdge.cpp']),
    
	env.SharedLibrary('Facet'
	    ,['DataClass/GeometricalModel/Facet.cpp']),
	
	env.SharedLibrary('MomentEngine',
		['Engine/DeusExMachina/MomentEngine.cpp'],
		LIBS=env['LIBS']+['yade-base','Momentum','ParticleParameters'],
		CPPPATH=env['CPPPATH']+['DataClass/PhysicalParameters',
			'Engine/DeusExMachina',
			'$PREFIX/include',
			'DataClass/PhysicalAction']),

	env.SharedLibrary('ForceEngine',
		['Engine/DeusExMachina/ForceEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',  'Force', 'ParticleParameters'],
		CPPPATH=env['CPPPATH']+['DataClass/PhysicalParameters',
			'Engine/DeusExMachina',
			'$PREFIX/include',
			'DataClass/PhysicalAction']),

	env.SharedLibrary('DisplacementToForceEngine',
		['Engine/DeusExMachina/DisplacementToForceEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'yade-factory',
			'yade-base',
			'Force',
			'ParticleParameters',
			'yade-serialization',
			'yade-multimethods'],
		CPPPATH=env['CPPPATH']+['DataClass/PhysicalParameters',
			'Engine/DeusExMachina',
			'$PREFIX/include', 
			'DataClass/PhysicalAction']),

	env.SharedLibrary('GravityEngine',
		['Engine/DeusExMachina/GravityEngine.cpp'],
		LIBS=env['LIBS']+['yade-base','Force','ParticleParameters'],
		CPPPATH=env['CPPPATH']+['Engine/DeusExMachina',
			'DataClass/PhysicalAction',
			'$PREFIX/include',
			'DataClass/PhysicalParameters']),
	
	env.SharedLibrary('CentralGravityEngine',
		['Engine/DeusExMachina/CentralGravityEngine.cpp'],
		LIBS=env['LIBS']+['yade-base','Force','ParticleParameters'],
		),

	env.SharedLibrary('RotationEngine',
		['Engine/DeusExMachina/RotationEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'ParticleParameters',
			'RigidBodyParameters',
			'yade-serialization',
			'yade-base',
			
			'yade-multimethods'],
		CPPPATH=env['CPPPATH']+['Engine/DeusExMachina',
			'$PREFIX/include',
			'DataClass/PhysicalParameters',
			'DataClass/PhysicalParameters']),

	env.SharedLibrary('TranslationEngine',
		['Engine/DeusExMachina/TranslationEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'ParticleParameters',
			'yade-serialization',
			'yade-multimethods'],
		CPPPATH=env['CPPPATH']+['DataClass/PhysicalParameters',
			'$PREFIX/include',
			'Engine/DeusExMachina']),

	env.SharedLibrary('CinemCisEngine',
		['Engine/DeusExMachina/CinemCisEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'ParticleParameters',
			'RigidBodyParameters',
			'yade-factory',
			'yade-base',
			'yade-serialization',
			'yade-multimethods'],
		CPPPATH=env['CPPPATH']+['DataClass/PhysicalParameters',
			'$PREFIX/include',
			'Engine/DeusExMachina']),

	env.SharedLibrary('StaticAttractionEngine',
		['Engine/DeusExMachina/StaticAttractionEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'yade-serialization',
			'yade-multimethods'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/DeusExMachina']),

	env.SharedLibrary('DisplacementEngine',
		['Engine/DeusExMachina/DisplacementEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'yade-serialization',
			'yade-multimethods'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/DeusExMachina']),

	env.SharedLibrary('FixedPositionEngine',
		['Engine/DeusExMachina/FixedPositionEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'yade-factory',
			'yade-base',
			
			'yade-serialization',
			'yade-multimethods'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/DeusExMachina']),

	env.SharedLibrary('FixedOrientationEngine',
		['Engine/DeusExMachina/FixedOrientationEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'yade-factory',
			'yade-base',
			
			'yade-serialization',
			'yade-loki',
			'yade-multimethods'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/DeusExMachina']),

	env.SharedLibrary('ResetPositionEngine',
		['Engine/DeusExMachina/ResetPositionEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'yade-factory',
			'yade-base',
			'yade-serialization',
			'yade-loki',
			'yade-multimethods',
			'ParticleParameters'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/DeusExMachina']),
	
	env.SharedLibrary('BoundingVolumeMetaEngine',
		['Engine/MetaEngine/BoundingVolumeMetaEngine.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/MetaEngine']),

	env.SharedLibrary('GeometricalModelMetaEngine',
		['Engine/MetaEngine/GeometricalModelMetaEngine.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/MetaEngine']),

	env.SharedLibrary('InteractingGeometryMetaEngine',
		['Engine/MetaEngine/InteractingGeometryMetaEngine.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/MetaEngine']),

	env.SharedLibrary('PhysicalParametersMetaEngine',
		['Engine/MetaEngine/PhysicalParametersMetaEngine.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/MetaEngine']),

	env.SharedLibrary('InteractionGeometryMetaEngine',
		['Engine/MetaEngine/InteractionGeometryMetaEngine.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['Engine/MetaEngine', '$PREFIX/include']),

	env.SharedLibrary('InteractionPhysicsMetaEngine',
		['Engine/MetaEngine/InteractionPhysicsMetaEngine.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/MetaEngine']),

	env.SharedLibrary('PhysicalActionApplier',
		['Engine/MetaEngine/PhysicalActionApplier.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/MetaEngine']),

	env.SharedLibrary('PhysicalActionDamper',
		['Engine/MetaEngine/PhysicalActionDamper.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/MetaEngine']),

	env.SharedLibrary('InteractingBox2AABB',
		['Engine/EngineUnit/InteractingBox2AABB.cpp'],
		LIBS=env['LIBS']+['yade-base',
			'BoundingVolumeMetaEngine',
			'InteractingBox',
			'AABB',
			'Box',
			'yade-base'],
		CPPPATH=env['CPPPATH']+['DataClass/BoundingVolume',
			'DataClass/InteractingGeometry',
			'$PREFIX/include',
			'Engine/MetaEngine',
			'Engine/EngineUnit']),

	env.SharedLibrary('MetaInteractingGeometry2AABB',
		['Engine/EngineUnit/MetaInteractingGeometry2AABB.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'BoundingVolumeMetaEngine',
			'MetaInteractingGeometry',
			'AABB'],
		CPPPATH=env['CPPPATH']+['DataClass/BoundingVolume',
			'$PREFIX/include',
			'DataClass/InteractingGeometry',
			'Engine/MetaEngine',
			'Engine/EngineUnit']),

	env.SharedLibrary('InteractingEdge2AABB'
	    ,['Engine/EngineUnit/InteractingEdge2AABB.cpp']
	    ,LIBS=env['LIBS']+['AABB','InteractingEdge']),
    
	env.SharedLibrary('InteractingFacet2AABB'
	    ,['Engine/EngineUnit/InteractingFacet2AABB.cpp']
	    ,LIBS=env['LIBS']+['AABB','InteractingFacet']),

	env.SharedLibrary('LeapFrogOrientationIntegrator',
		['Engine/EngineUnit/LeapFrogOrientationIntegrator.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'PhysicalParametersMetaEngine',
			'ParticleParameters',
			'RigidBodyParameters'],
		CPPPATH=env['CPPPATH']+['Engine/EngineUnit',
			'$PREFIX/include',
			'DataClass/PhysicalParameters',
			'Engine/MetaEngine',
			'DataClass/PhysicalParameters']),

	env.SharedLibrary('LeapFrogPositionIntegrator',
		['Engine/EngineUnit/LeapFrogPositionIntegrator.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'PhysicalParametersMetaEngine',
			'ParticleParameters',
			'RigidBodyParameters'],
		CPPPATH=env['CPPPATH']+['DataClass/PhysicalParameters',
			'$PREFIX/include',
			'Engine/MetaEngine',
			'Engine/EngineUnit']),

	env.SharedLibrary('NewtonsForceLaw',
		['Engine/EngineUnit/NewtonsForceLaw.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'PhysicalActionApplier',
			'Force',
			'ParticleParameters',
			'PhysicalActionApplier',
			'RigidBodyParameters'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'DataClass/PhysicalParameters',
			'Engine/MetaEngine',
			'DataClass/PhysicalAction',
			'Engine/EngineUnit',
			'DataClass/PhysicalParameters']),

	env.SharedLibrary('NewtonsMomentumLaw',
		['Engine/EngineUnit/NewtonsMomentumLaw.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'PhysicalActionApplier',
			'Momentum',
			'RigidBodyParameters',
			'PhysicalActionApplier'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'DataClass/PhysicalParameters',
			'Engine/EngineUnit',
			'Engine/MetaEngine',
			'DataClass/PhysicalAction',
			'DataClass/PhysicalParameters']),

	env.SharedLibrary('InteractingSphere2AABB',
		['Engine/EngineUnit/InteractingSphere2AABB.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'BoundingVolumeMetaEngine',
			'InteractingSphere',
			'AABB',
			'yade-base',
			],
		CPPPATH=env['CPPPATH']+['DataClass/BoundingVolume',
			'$PREFIX/include',
			'Engine/MetaEngine',
			'Engine/EngineUnit',
			'DataClass/InteractingGeometry']),

	env.SharedLibrary('CundallNonViscousForceDamping',
		['Engine/EngineUnit/CundallNonViscousForceDamping.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'PhysicalActionDamper',
			'Force',
			'ParticleParameters'],
		CPPPATH=env['CPPPATH']+['DataClass/PhysicalParameters',
			'Engine/EngineUnit',
			'$PREFIX/include',
			'Engine/MetaEngine',
			'DataClass/PhysicalAction']),

	env.SharedLibrary('CundallNonViscousMomentumDamping',
		['Engine/EngineUnit/CundallNonViscousMomentumDamping.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'PhysicalActionDamper',
			'Momentum',
			'RigidBodyParameters'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'DataClass/PhysicalParameters',
			'Engine/EngineUnit',
			'DataClass/PhysicalParameters',
			'DataClass/PhysicalAction',
			'Engine/MetaEngine']),

	env.SharedLibrary('ElasticBodySimpleRelationship',
		['Engine/EngineUnit/ElasticBodySimpleRelationship.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'ElasticBodyParameters',
			'SimpleElasticInteraction',
			'RigidBodyParameters',
			'ParticleParameters',
			'InteractionPhysicsMetaEngine'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'DataClass/PhysicalParameters',
			'DataClass/InteractionPhysics',
			'Engine/MetaEngine',
			'DataClass/PhysicalParameters',
			'Engine/EngineUnit',
			'DataClass/PhysicalParameters']),

	#env.SharedLibrary('PersistentTriangulationCollider',
	#	['Engine/StandAloneEngine/PersistentTriangulationCollider.cpp'],
	#	LIBPATH=env['LIBPATH']+['/home/bruno/micromacro/KdevMicroMacro/src'],
	#	LIBS=env['LIBS']+['yade-base', 'TesselationWrapper', 'CGAL',  'InteractingSphere', 'RigidBodyParameters'],
	#	CPPPATH=env['CPPPATH']+['Engine/StandAloneEngine', '$PREFIX/include', '/home/bruno/micromacro/KdevMicroMacro/src']),
    
	env.SharedLibrary('SpatialQuickSortCollider' 
	    ,['Engine/StandAloneEngine/SpatialQuickSortCollider.cpp']),
		
	env.SharedLibrary('PersistentSAPCollider',
		['Engine/StandAloneEngine/PersistentSAPCollider.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['Engine/StandAloneEngine', '$PREFIX/include']),
				
	env.SharedLibrary('DistantPersistentSAPCollider',
		['Engine/StandAloneEngine/DistantPersistentSAPCollider.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['Engine/StandAloneEngine', '$PREFIX/include']),

	env.SharedLibrary('SAPCollider',
		['Engine/StandAloneEngine/SAPCollider.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'yade-serialization',
			'yade-base',
			
			'yade-multimethods'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'Engine/StandAloneEngine']),

	env.SharedLibrary('PhysicalActionContainerInitializer',
		['Engine/StandAloneEngine/PhysicalActionContainerInitializer.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['Engine/StandAloneEngine',
			'$PREFIX/include']),

	env.SharedLibrary('PhysicalActionContainerReseter',
		['Engine/StandAloneEngine/PhysicalActionContainerReseter.cpp'],
		LIBS=env['LIBS']+['yade-base'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'Engine/StandAloneEngine']),

	env.SharedLibrary('GLDrawAABB',
		['RenderingEngine/GLDrawBoundingVolume/GLDrawAABB.cpp'],
		LIBS=env['LIBS']+['yade-base',  'AABB', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['DataClass/BoundingVolume',
			'$PREFIX/include',
			'RenderingEngine/OpenGLRenderingEngine',
			'RenderingEngine/GLDrawBoundingVolume']),

	env.SharedLibrary('GLDrawBoundingSphere',
		['RenderingEngine/GLDrawBoundingVolume/GLDrawBoundingSphere.cpp'],
		LIBS=env['LIBS']+['yade-base',  'BoundingSphere', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'RenderingEngine/OpenGLRenderingEngine',
			'RenderingEngine/GLDrawBoundingVolume',
			'DataClass/BoundingVolume']),

	env.SharedLibrary('GLDrawTetrahedron',
		['RenderingEngine/GLDrawGeometricalModel/GLDrawTetrahedron.cpp'],
		LIBS=env['LIBS']+['yade-base',  'Tetrahedron', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['RenderingEngine/GLDrawGeometricalModel',
			'$PREFIX/include',
			'RenderingEngine/OpenGLRenderingEngine',
			'DataClass/GeometricalModel']),

	env.SharedLibrary('GLDrawBox',
		['RenderingEngine/GLDrawGeometricalModel/GLDrawBox.cpp'],
		LIBS=env['LIBS']+['yade-base',  'Box', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'RenderingEngine/GLDrawGeometricalModel',
			'RenderingEngine/OpenGLRenderingEngine',
			'DataClass/GeometricalModel']),

	env.SharedLibrary('GLDrawMesh2D',
		['RenderingEngine/GLDrawGeometricalModel/GLDrawMesh2D.cpp'],
		LIBS=env['LIBS']+['yade-base',  'Mesh2D', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['DataClass/GeometricalModel',
			'$PREFIX/include',
			'RenderingEngine/OpenGLRenderingEngine',
			'RenderingEngine/GLDrawGeometricalModel']),

	env.SharedLibrary('GLDrawSphere',
		['RenderingEngine/GLDrawGeometricalModel/GLDrawSphere.cpp'],
		LIBS=env['LIBS']+['yade-base',  'Sphere', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['RenderingEngine/OpenGLRenderingEngine',
			'$PREFIX/include',
			'RenderingEngine/GLDrawGeometricalModel',
			'DataClass/GeometricalModel']),

	env.SharedLibrary('GLDrawQuadrilateral',
		['RenderingEngine/GLDrawGeometricalModel/GLDrawQuadrilateral.cpp'],
		LIBS=env['LIBS']+['yade-base',  'Quadrilateral', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['RenderingEngine/GLDrawGeometricalModel',
			'$PREFIX/include',
			'DataClass/GeometricalModel',
			'RenderingEngine/OpenGLRenderingEngine']),
    
	env.SharedLibrary('GLDrawVertex'
	    ,['RenderingEngine/GLDrawGeometricalModel/GLDrawVertex.cpp']
	    ,LIBS=env['LIBS']+['yade-opengl','Vertex']),
	
	env.SharedLibrary('GLDrawGeometricalEdge'
	    ,['RenderingEngine/GLDrawGeometricalModel/GLDrawGeometricalEdge.cpp']
	    ,LIBS=env['LIBS']+['yade-opengl','GeometricalEdge']),
	
	env.SharedLibrary('GLDrawFacet'
	    ,['RenderingEngine/GLDrawGeometricalModel/GLDrawFacet.cpp']
	    ,LIBS=env['LIBS']+['yade-opengl','Facet']),

	env.SharedLibrary('GLDrawInteractingBox',
		['RenderingEngine/GLDrawInteractingGeometry/GLDrawInteractingBox.cpp'],
		LIBS=env['LIBS']+['yade-base',  'InteractingBox', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'RenderingEngine/OpenGLRenderingEngine',
			'DataClass/InteractingGeometry',
			'RenderingEngine/GLDrawInteractingGeometry']),

	env.SharedLibrary('GLDrawInteractingSphere',
		['RenderingEngine/GLDrawInteractingGeometry/GLDrawInteractingSphere.cpp'],
		LIBS=env['LIBS']+['yade-base',  'InteractingSphere', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'DataClass/InteractingGeometry',
			'RenderingEngine/OpenGLRenderingEngine',
			'RenderingEngine/GLDrawInteractingGeometry']),

	env.SharedLibrary('GLDrawMetaInteractingGeometry',
		['RenderingEngine/GLDrawInteractingGeometry/GLDrawMetaInteractingGeometry.cpp'],
		LIBS=env['LIBS']+['yade-base',  'yade-opengl'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'DataClass/InteractingGeometry',
			'RenderingEngine/OpenGLRenderingEngine',
			'RenderingEngine/GLDrawInteractingGeometry']),

	env.SharedLibrary('GLDrawInteractingVertex'
	    ,['RenderingEngine/GLDrawInteractingGeometry/GLDrawInteractingVertex.cpp']
	    ,LIBS=env['LIBS']+['yade-opengl','InteractingVertex']),
	
	env.SharedLibrary('GLDrawInteractingEdge'
	    ,['RenderingEngine/GLDrawInteractingGeometry/GLDrawInteractingEdge.cpp']
	    ,LIBS=env['LIBS']+['yade-opengl','InteractingEdge']),

	env.SharedLibrary('GLDrawInteractingFacet'
	    ,['RenderingEngine/GLDrawInteractingGeometry/GLDrawInteractingFacet.cpp']
	    ,LIBS=env['LIBS']+['yade-opengl','InteractingFacet']),
	
	env.SharedLibrary('GLDrawBoxShadowVolume',
		['RenderingEngine/GLDrawShadowVolume/GLDrawBoxShadowVolume.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'Box',
			'ParticleParameters',
			'yade-opengl',
			'RigidBodyParameters'],
		CPPPATH=env['CPPPATH']+['RenderingEngine/OpenGLRenderingEngine',
			'$PREFIX/include',
			'RenderingEngine/GLDrawShadowVolume',
			'DataClass/GeometricalModel']),

	env.SharedLibrary('GLDrawSphereShadowVolume',
		['RenderingEngine/GLDrawShadowVolume/GLDrawSphereShadowVolume.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'Sphere',
			'ParticleParameters',
			'yade-opengl'],
		CPPPATH=env['CPPPATH']+['RenderingEngine/GLDrawShadowVolume',
			'$PREFIX/include',
			'RenderingEngine/OpenGLRenderingEngine',
			'DataClass/GeometricalModel']),

	env.SharedLibrary('GLDrawClosestFeatures',
		['RenderingEngine/GLDrawInteractionGeometry/GLDrawClosestFeatures.cpp'],
		LIBS=env['LIBS']+['yade-base',  'ClosestFeatures', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'RenderingEngine/OpenGLRenderingEngine',
			'DataClass/InteractionGeometry',
			'RenderingEngine/GLDrawInteractionGeometry']),

	env.SharedLibrary('GLDrawSimpleElasticInteraction',
		['RenderingEngine/GLDrawInteractionPhysics/GLDrawSimpleElasticInteraction.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'SimpleElasticInteraction',
			'yade-opengl'],
		CPPPATH=env['CPPPATH']+['RenderingEngine/OpenGLRenderingEngine',
			'$PREFIX/include',
			'DataClass/InteractionPhysics',
			'RenderingEngine/GLDrawInteractionPhysics']),

	env.SharedLibrary('GLDrawParticleState',
		['RenderingEngine/GLDrawState/GLDrawParticleState.cpp'],
		LIBS=env['LIBS']+['yade-base',  'ParticleParameters', 'yade-opengl'],
		CPPPATH=env['CPPPATH']+['RenderingEngine/OpenGLRenderingEngine',
			'DataClass/PhysicalParameters',
			'$PREFIX/include',
			'RenderingEngine/GLDrawState']),

	env.SharedLibrary('GLDrawRigidBodyState',
		['RenderingEngine/GLDrawState/GLDrawRigidBodyState.cpp'],
		LIBS=env['LIBS']+['yade-base',
			
			'ParticleParameters',
			'RigidBodyParameters',
			'GLDrawParticleState',
			'yade-opengl'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include',
			'RenderingEngine/GLDrawState',
			'DataClass/PhysicalParameters',
			'RenderingEngine/GLDrawState',
			'RenderingEngine/OpenGLRenderingEngine',
			'DataClass/PhysicalParameters']),

	env.SharedLibrary('OpenGLRenderingEngine',
		['RenderingEngine/OpenGLRenderingEngine/OpenGLRenderingEngine.cpp'],
		LIBS=env['LIBS']+['yade-base',  'glut', 'GLU', 'GL'],
		CPPPATH=env['CPPPATH']+['$PREFIX/include', 'RenderingEngine/OpenGLRenderingEngine'])
])

